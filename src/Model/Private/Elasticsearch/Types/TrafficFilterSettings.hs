-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TrafficFilterSettings
module Model/Private/Elasticsearch.Types.TrafficFilterSettings where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.TrafficFilterSettings@ in the specification.
-- 
-- The configuration settings for the traffic filter.
data TrafficFilterSettings = TrafficFilterSettings {
  -- | rulesets: IDs of the traffic filter rulesets
  trafficFilterSettingsRulesets :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TrafficFilterSettings
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["rulesets" Data.Aeson.Types.ToJSON..= trafficFilterSettingsRulesets obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["rulesets" Data.Aeson.Types.ToJSON..= trafficFilterSettingsRulesets obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON TrafficFilterSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TrafficFilterSettings" (\obj -> GHC.Base.pure TrafficFilterSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rulesets"))
-- | Create a new 'TrafficFilterSettings' with all required fields.
mkTrafficFilterSettings :: [Data.Text.Internal.Text] -- ^ 'trafficFilterSettingsRulesets'
  -> TrafficFilterSettings
mkTrafficFilterSettings trafficFilterSettingsRulesets = TrafficFilterSettings{trafficFilterSettingsRulesets = trafficFilterSettingsRulesets}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TopologySize
module Model/Private/Elasticsearch.Types.TopologySize where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.TopologySize@ in the specification.
-- 
-- Measured by the amount of a resource. The final cluster size is calculated using multipliers from the topology instance configuration.
data TopologySize = TopologySize {
  -- | resource: Type of resource
  topologySizeResource :: TopologySizeResource
  -- | value: Amount of resource
  , topologySizeValue :: GHC.Int.Int32
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TopologySize
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["resource" Data.Aeson.Types.ToJSON..= topologySizeResource obj] : ["value" Data.Aeson.Types.ToJSON..= topologySizeValue obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["resource" Data.Aeson.Types.ToJSON..= topologySizeResource obj] : ["value" Data.Aeson.Types.ToJSON..= topologySizeValue obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON TopologySize
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TopologySize" (\obj -> (GHC.Base.pure TopologySize GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resource")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value"))
-- | Create a new 'TopologySize' with all required fields.
mkTopologySize :: TopologySizeResource -- ^ 'topologySizeResource'
  -> GHC.Int.Int32 -- ^ 'topologySizeValue'
  -> TopologySize
mkTopologySize topologySizeResource topologySizeValue = TopologySize{topologySizeResource = topologySizeResource,
                                                                     topologySizeValue = topologySizeValue}
-- | Defines the enum schema located at @components.schemas.TopologySize.properties.resource@ in the specification.
-- 
-- Type of resource
data TopologySizeResource =
   TopologySizeResourceOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TopologySizeResourceTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TopologySizeResourceEnumMemory -- ^ Represents the JSON value @"memory"@
  | TopologySizeResourceEnumStorage -- ^ Represents the JSON value @"storage"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TopologySizeResource
    where toJSON (TopologySizeResourceOther val) = val
          toJSON (TopologySizeResourceTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (TopologySizeResourceEnumMemory) = "memory"
          toJSON (TopologySizeResourceEnumStorage) = "storage"
instance Data.Aeson.Types.FromJSON.FromJSON TopologySizeResource
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "memory" -> TopologySizeResourceEnumMemory
                                            | val GHC.Classes.== "storage" -> TopologySizeResourceEnumStorage
                                            | GHC.Base.otherwise -> TopologySizeResourceOther val)

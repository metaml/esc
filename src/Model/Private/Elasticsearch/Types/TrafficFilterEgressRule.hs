-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema TrafficFilterEgressRule
module Model/Private/Elasticsearch.Types.TrafficFilterEgressRule where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.TrafficFilterEgressRule@ in the specification.
-- 
-- The rule detail for a traffic filter egress rule.
data TrafficFilterEgressRule = TrafficFilterEgressRule {
  -- | ports: A list of target ports for an egress rule
  trafficFilterEgressRulePorts :: (GHC.Maybe.Maybe ([GHC.Int.Int32]))
  -- | protocol: The target protocol for an egress rule
  , trafficFilterEgressRuleProtocol :: TrafficFilterEgressRuleProtocol
  -- | target: Allowed traffic filter egress target: IP address or CIDR mask
  , trafficFilterEgressRuleTarget :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TrafficFilterEgressRule
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ports" Data.Aeson.Types.ToJSON..=)) (trafficFilterEgressRulePorts obj) : ["protocol" Data.Aeson.Types.ToJSON..= trafficFilterEgressRuleProtocol obj] : ["target" Data.Aeson.Types.ToJSON..= trafficFilterEgressRuleTarget obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ports" Data.Aeson.Types.ToJSON..=)) (trafficFilterEgressRulePorts obj) : ["protocol" Data.Aeson.Types.ToJSON..= trafficFilterEgressRuleProtocol obj] : ["target" Data.Aeson.Types.ToJSON..= trafficFilterEgressRuleTarget obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON TrafficFilterEgressRule
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TrafficFilterEgressRule" (\obj -> ((GHC.Base.pure TrafficFilterEgressRule GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ports")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "target"))
-- | Create a new 'TrafficFilterEgressRule' with all required fields.
mkTrafficFilterEgressRule :: TrafficFilterEgressRuleProtocol -- ^ 'trafficFilterEgressRuleProtocol'
  -> Data.Text.Internal.Text -- ^ 'trafficFilterEgressRuleTarget'
  -> TrafficFilterEgressRule
mkTrafficFilterEgressRule trafficFilterEgressRuleProtocol trafficFilterEgressRuleTarget = TrafficFilterEgressRule{trafficFilterEgressRulePorts = GHC.Maybe.Nothing,
                                                                                                                  trafficFilterEgressRuleProtocol = trafficFilterEgressRuleProtocol,
                                                                                                                  trafficFilterEgressRuleTarget = trafficFilterEgressRuleTarget}
-- | Defines the enum schema located at @components.schemas.TrafficFilterEgressRule.properties.protocol@ in the specification.
-- 
-- The target protocol for an egress rule
data TrafficFilterEgressRuleProtocol =
   TrafficFilterEgressRuleProtocolOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TrafficFilterEgressRuleProtocolTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TrafficFilterEgressRuleProtocolEnumAll -- ^ Represents the JSON value @"all"@
  | TrafficFilterEgressRuleProtocolEnumTcp -- ^ Represents the JSON value @"tcp"@
  | TrafficFilterEgressRuleProtocolEnumUdp -- ^ Represents the JSON value @"udp"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON TrafficFilterEgressRuleProtocol
    where toJSON (TrafficFilterEgressRuleProtocolOther val) = val
          toJSON (TrafficFilterEgressRuleProtocolTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (TrafficFilterEgressRuleProtocolEnumAll) = "all"
          toJSON (TrafficFilterEgressRuleProtocolEnumTcp) = "tcp"
          toJSON (TrafficFilterEgressRuleProtocolEnumUdp) = "udp"
instance Data.Aeson.Types.FromJSON.FromJSON TrafficFilterEgressRuleProtocol
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "all" -> TrafficFilterEgressRuleProtocolEnumAll
                                            | val GHC.Classes.== "tcp" -> TrafficFilterEgressRuleProtocolEnumTcp
                                            | val GHC.Classes.== "udp" -> TrafficFilterEgressRuleProtocolEnumUdp
                                            | GHC.Base.otherwise -> TrafficFilterEgressRuleProtocolOther val)

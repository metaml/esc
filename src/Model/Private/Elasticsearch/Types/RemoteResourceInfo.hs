-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RemoteResourceInfo
module Model/Private/Elasticsearch.Types.RemoteResourceInfo where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.RemoteResourceInfo@ in the specification.
-- 
-- Information about a Remote Cluster.
data RemoteResourceInfo = RemoteResourceInfo {
  -- | compatible: Whether or not the remote cluster version is compatible with this cluster version.
  remoteResourceInfoCompatible :: GHC.Types.Bool
  -- | connected: Whether or not there is at least one connection to the remote cluster.
  , remoteResourceInfoConnected :: GHC.Types.Bool
  -- | healthy: Whether or not the remote cluster is healthy
  , remoteResourceInfoHealthy :: GHC.Types.Bool
  -- | trusted: Whether or not the remote cluster is trusted by this cluster.
  , remoteResourceInfoTrusted :: GHC.Types.Bool
  -- | trusted_back: Whether or not the remote cluster trusts this cluster back.
  , remoteResourceInfoTrustedBack :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RemoteResourceInfo
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["compatible" Data.Aeson.Types.ToJSON..= remoteResourceInfoCompatible obj] : ["connected" Data.Aeson.Types.ToJSON..= remoteResourceInfoConnected obj] : ["healthy" Data.Aeson.Types.ToJSON..= remoteResourceInfoHealthy obj] : ["trusted" Data.Aeson.Types.ToJSON..= remoteResourceInfoTrusted obj] : ["trusted_back" Data.Aeson.Types.ToJSON..= remoteResourceInfoTrustedBack obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["compatible" Data.Aeson.Types.ToJSON..= remoteResourceInfoCompatible obj] : ["connected" Data.Aeson.Types.ToJSON..= remoteResourceInfoConnected obj] : ["healthy" Data.Aeson.Types.ToJSON..= remoteResourceInfoHealthy obj] : ["trusted" Data.Aeson.Types.ToJSON..= remoteResourceInfoTrusted obj] : ["trusted_back" Data.Aeson.Types.ToJSON..= remoteResourceInfoTrustedBack obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON RemoteResourceInfo
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RemoteResourceInfo" (\obj -> ((((GHC.Base.pure RemoteResourceInfo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "compatible")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "connected")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "healthy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "trusted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "trusted_back"))
-- | Create a new 'RemoteResourceInfo' with all required fields.
mkRemoteResourceInfo :: GHC.Types.Bool -- ^ 'remoteResourceInfoCompatible'
  -> GHC.Types.Bool -- ^ 'remoteResourceInfoConnected'
  -> GHC.Types.Bool -- ^ 'remoteResourceInfoHealthy'
  -> GHC.Types.Bool -- ^ 'remoteResourceInfoTrusted'
  -> GHC.Types.Bool -- ^ 'remoteResourceInfoTrustedBack'
  -> RemoteResourceInfo
mkRemoteResourceInfo remoteResourceInfoCompatible remoteResourceInfoConnected remoteResourceInfoHealthy remoteResourceInfoTrusted remoteResourceInfoTrustedBack = RemoteResourceInfo{remoteResourceInfoCompatible = remoteResourceInfoCompatible,
                                                                                                                                                                                     remoteResourceInfoConnected = remoteResourceInfoConnected,
                                                                                                                                                                                     remoteResourceInfoHealthy = remoteResourceInfoHealthy,
                                                                                                                                                                                     remoteResourceInfoTrusted = remoteResourceInfoTrusted,
                                                                                                                                                                                     remoteResourceInfoTrustedBack = remoteResourceInfoTrustedBack}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ApmPlan
module Model/Private/Elasticsearch.Types.ApmPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ApmConfiguration
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ApmTopologyElement
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.TransientApmPlanConfiguration

-- | Defines the object schema located at @components.schemas.ApmPlan@ in the specification.
-- 
-- The plan for the APM Server.
data ApmPlan = ApmPlan {
  -- | apm: The configuration options for the APM Server.
  apmPlanApm :: ApmConfiguration
  -- | cluster_topology
  , apmPlanClusterTopology :: (GHC.Maybe.Maybe ([ApmTopologyElement]))
  -- | transient: Defines the configuration parameters that control how the plan is applied. For example, the Elasticsearch cluster topology and APM Server settings.
  , apmPlanTransient :: (GHC.Maybe.Maybe TransientApmPlanConfiguration)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ApmPlan
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["apm" Data.Aeson.Types.ToJSON..= apmPlanApm obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cluster_topology" Data.Aeson.Types.ToJSON..=)) (apmPlanClusterTopology obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transient" Data.Aeson.Types.ToJSON..=)) (apmPlanTransient obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["apm" Data.Aeson.Types.ToJSON..= apmPlanApm obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cluster_topology" Data.Aeson.Types.ToJSON..=)) (apmPlanClusterTopology obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transient" Data.Aeson.Types.ToJSON..=)) (apmPlanTransient obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ApmPlan
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApmPlan" (\obj -> ((GHC.Base.pure ApmPlan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "apm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cluster_topology")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transient"))
-- | Create a new 'ApmPlan' with all required fields.
mkApmPlan :: ApmConfiguration -- ^ 'apmPlanApm'
  -> ApmPlan
mkApmPlan apmPlanApm = ApmPlan{apmPlanApm = apmPlanApm,
                               apmPlanClusterTopology = GHC.Maybe.Nothing,
                               apmPlanTransient = GHC.Maybe.Nothing}

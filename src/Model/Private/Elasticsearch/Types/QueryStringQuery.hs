-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema QueryStringQuery
module Model/Private/Elasticsearch.Types.QueryStringQuery where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.QueryStringQuery@ in the specification.
-- 
-- A query that uses the \`SimpleQueryParser\` for parsing.
data QueryStringQuery = QueryStringQuery {
  -- | allow_leading_wildcard: When set, * or ? are allowed as the first character. Defaults to false.
  queryStringQueryAllowLeadingWildcard :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | analyzer: The analyzer used to analyze each term of the query when creating composite queries.
  , queryStringQueryAnalyzer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | default_field: The default field for query terms if no prefix field is specified.
  , queryStringQueryDefaultField :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | default_operator: The default operator used if no explicit operator is specified.
  , queryStringQueryDefaultOperator :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | query: The actual query to be parsed.
  , queryStringQueryQuery :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QueryStringQuery
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_leading_wildcard" Data.Aeson.Types.ToJSON..=)) (queryStringQueryAllowLeadingWildcard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("analyzer" Data.Aeson.Types.ToJSON..=)) (queryStringQueryAnalyzer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_field" Data.Aeson.Types.ToJSON..=)) (queryStringQueryDefaultField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_operator" Data.Aeson.Types.ToJSON..=)) (queryStringQueryDefaultOperator obj) : ["query" Data.Aeson.Types.ToJSON..= queryStringQueryQuery obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_leading_wildcard" Data.Aeson.Types.ToJSON..=)) (queryStringQueryAllowLeadingWildcard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("analyzer" Data.Aeson.Types.ToJSON..=)) (queryStringQueryAnalyzer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_field" Data.Aeson.Types.ToJSON..=)) (queryStringQueryDefaultField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_operator" Data.Aeson.Types.ToJSON..=)) (queryStringQueryDefaultOperator obj) : ["query" Data.Aeson.Types.ToJSON..= queryStringQueryQuery obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON QueryStringQuery
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "QueryStringQuery" (\obj -> ((((GHC.Base.pure QueryStringQuery GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_leading_wildcard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "analyzer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_field")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_operator")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "query"))
-- | Create a new 'QueryStringQuery' with all required fields.
mkQueryStringQuery :: Data.Text.Internal.Text -- ^ 'queryStringQueryQuery'
  -> QueryStringQuery
mkQueryStringQuery queryStringQueryQuery = QueryStringQuery{queryStringQueryAllowLeadingWildcard = GHC.Maybe.Nothing,
                                                            queryStringQueryAnalyzer = GHC.Maybe.Nothing,
                                                            queryStringQueryDefaultField = GHC.Maybe.Nothing,
                                                            queryStringQueryDefaultOperator = GHC.Maybe.Nothing,
                                                            queryStringQueryQuery = queryStringQueryQuery}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema EnterpriseSearchTopologyElement
module Model/Private/Elasticsearch.Types.EnterpriseSearchTopologyElement where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.EnterpriseSearchConfiguration
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.EnterpriseSearchNodeTypes
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.TopologySize

-- | Defines the object schema located at @components.schemas.EnterpriseSearchTopologyElement@ in the specification.
-- 
-- Defines the topology of the Enterprise Search nodes (e.g. number\/capacity of nodes, and where they can be allocated)
data EnterpriseSearchTopologyElement = EnterpriseSearchTopologyElement {
  -- | allocator_filter
  enterpriseSearchTopologyElementAllocatorFilter :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | enterprise_search
  , enterpriseSearchTopologyElementEnterpriseSearch :: (GHC.Maybe.Maybe EnterpriseSearchConfiguration)
  -- | instance_configuration_id: Controls the allocation of this topology element as well as allowed sizes and node_types. It needs to match the id of an existing instance configuration.
  , enterpriseSearchTopologyElementInstanceConfigurationId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | memory_per_node
  , enterpriseSearchTopologyElementMemoryPerNode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | node_configuration
  , enterpriseSearchTopologyElementNodeConfiguration :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | node_count_per_zone
  , enterpriseSearchTopologyElementNodeCountPerZone :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | node_type: Node types to enable for an Enterprise Search instance
  , enterpriseSearchTopologyElementNodeType :: (GHC.Maybe.Maybe EnterpriseSearchNodeTypes)
  -- | size: Measured by the amount of a resource. The final cluster size is calculated using multipliers from the topology instance configuration.
  , enterpriseSearchTopologyElementSize :: (GHC.Maybe.Maybe TopologySize)
  -- | zone_count: number of zones in which nodes will be placed
  , enterpriseSearchTopologyElementZoneCount :: (GHC.Maybe.Maybe GHC.Int.Int32)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EnterpriseSearchTopologyElement
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allocator_filter" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementAllocatorFilter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enterprise_search" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementEnterpriseSearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instance_configuration_id" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementInstanceConfigurationId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("memory_per_node" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementMemoryPerNode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_configuration" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementNodeConfiguration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_count_per_zone" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementNodeCountPerZone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_type" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementNodeType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zone_count" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementZoneCount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allocator_filter" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementAllocatorFilter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enterprise_search" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementEnterpriseSearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instance_configuration_id" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementInstanceConfigurationId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("memory_per_node" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementMemoryPerNode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_configuration" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementNodeConfiguration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_count_per_zone" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementNodeCountPerZone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_type" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementNodeType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zone_count" Data.Aeson.Types.ToJSON..=)) (enterpriseSearchTopologyElementZoneCount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON EnterpriseSearchTopologyElement
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EnterpriseSearchTopologyElement" (\obj -> ((((((((GHC.Base.pure EnterpriseSearchTopologyElement GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allocator_filter")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enterprise_search")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instance_configuration_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "memory_per_node")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "node_configuration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "node_count_per_zone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "node_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zone_count"))
-- | Create a new 'EnterpriseSearchTopologyElement' with all required fields.
mkEnterpriseSearchTopologyElement :: EnterpriseSearchTopologyElement
mkEnterpriseSearchTopologyElement = EnterpriseSearchTopologyElement{enterpriseSearchTopologyElementAllocatorFilter = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementEnterpriseSearch = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementInstanceConfigurationId = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementMemoryPerNode = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementNodeConfiguration = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementNodeCountPerZone = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementNodeType = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementSize = GHC.Maybe.Nothing,
                                                                    enterpriseSearchTopologyElementZoneCount = GHC.Maybe.Nothing}

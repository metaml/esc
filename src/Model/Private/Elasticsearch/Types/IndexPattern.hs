-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema IndexPattern
module Model/Private/Elasticsearch.Types.IndexPattern where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.IndexPattern@ in the specification.
-- 
-- An index pattern described indicating how it has to be migrated to ILM.
data IndexPattern = IndexPattern {
  -- | index_pattern: Index pattern to which the ILM policy will be applied.
  indexPatternIndexPattern :: Data.Text.Internal.Text
  -- | node_attributes: Defines the Elasticsearch node attributes for the warm element of the topology
  , indexPatternNodeAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | policy_name: Name of the policy to create
  , indexPatternPolicyName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IndexPattern
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["index_pattern" Data.Aeson.Types.ToJSON..= indexPatternIndexPattern obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_attributes" Data.Aeson.Types.ToJSON..=)) (indexPatternNodeAttributes obj) : ["policy_name" Data.Aeson.Types.ToJSON..= indexPatternPolicyName obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["index_pattern" Data.Aeson.Types.ToJSON..= indexPatternIndexPattern obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_attributes" Data.Aeson.Types.ToJSON..=)) (indexPatternNodeAttributes obj) : ["policy_name" Data.Aeson.Types.ToJSON..= indexPatternPolicyName obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON IndexPattern
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IndexPattern" (\obj -> ((GHC.Base.pure IndexPattern GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "index_pattern")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "node_attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_name"))
-- | Create a new 'IndexPattern' with all required fields.
mkIndexPattern :: Data.Text.Internal.Text -- ^ 'indexPatternIndexPattern'
  -> Data.Text.Internal.Text -- ^ 'indexPatternPolicyName'
  -> IndexPattern
mkIndexPattern indexPatternIndexPattern indexPatternPolicyName = IndexPattern{indexPatternIndexPattern = indexPatternIndexPattern,
                                                                              indexPatternNodeAttributes = GHC.Maybe.Nothing,
                                                                              indexPatternPolicyName = indexPatternPolicyName}

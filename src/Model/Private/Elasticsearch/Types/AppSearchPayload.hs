-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AppSearchPayload
module Model/Private/Elasticsearch.Types.AppSearchPayload where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.AppSearchPlan
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.AppSearchSettings

-- | Defines the object schema located at @components.schemas.AppSearchPayload@ in the specification.
-- 
-- An AppSearch creation request paired with the alias of the Elasticsearch cluster it should be paired with
data AppSearchPayload = AppSearchPayload {
  -- | display_name: The human readable name for the AppSearch cluster (default: takes the name of its Elasticsearch cluster)
  appSearchPayloadDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | elasticsearch_cluster_ref_id: Alias to the Elasticsearch Cluster to attach AppSearch to
  , appSearchPayloadElasticsearchClusterRefId :: Data.Text.Internal.Text
  -- | plan: The plan for the App Search cluster.
  , appSearchPayloadPlan :: AppSearchPlan
  -- | ref_id: A locally-unique user-specified id for AppSearch
  , appSearchPayloadRefId :: Data.Text.Internal.Text
  -- | region: The region where this resource exists
  , appSearchPayloadRegion :: Data.Text.Internal.Text
  -- | settings: The settings for the App Search.
  , appSearchPayloadSettings :: (GHC.Maybe.Maybe AppSearchSettings)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AppSearchPayload
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (appSearchPayloadDisplayName obj) : ["elasticsearch_cluster_ref_id" Data.Aeson.Types.ToJSON..= appSearchPayloadElasticsearchClusterRefId obj] : ["plan" Data.Aeson.Types.ToJSON..= appSearchPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= appSearchPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= appSearchPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (appSearchPayloadSettings obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (appSearchPayloadDisplayName obj) : ["elasticsearch_cluster_ref_id" Data.Aeson.Types.ToJSON..= appSearchPayloadElasticsearchClusterRefId obj] : ["plan" Data.Aeson.Types.ToJSON..= appSearchPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= appSearchPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= appSearchPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (appSearchPayloadSettings obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AppSearchPayload
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AppSearchPayload" (\obj -> (((((GHC.Base.pure AppSearchPayload GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "elasticsearch_cluster_ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))
-- | Create a new 'AppSearchPayload' with all required fields.
mkAppSearchPayload :: Data.Text.Internal.Text -- ^ 'appSearchPayloadElasticsearchClusterRefId'
  -> AppSearchPlan -- ^ 'appSearchPayloadPlan'
  -> Data.Text.Internal.Text -- ^ 'appSearchPayloadRefId'
  -> Data.Text.Internal.Text -- ^ 'appSearchPayloadRegion'
  -> AppSearchPayload
mkAppSearchPayload appSearchPayloadElasticsearchClusterRefId appSearchPayloadPlan appSearchPayloadRefId appSearchPayloadRegion = AppSearchPayload{appSearchPayloadDisplayName = GHC.Maybe.Nothing,
                                                                                                                                                  appSearchPayloadElasticsearchClusterRefId = appSearchPayloadElasticsearchClusterRefId,
                                                                                                                                                  appSearchPayloadPlan = appSearchPayloadPlan,
                                                                                                                                                  appSearchPayloadRefId = appSearchPayloadRefId,
                                                                                                                                                  appSearchPayloadRegion = appSearchPayloadRegion,
                                                                                                                                                  appSearchPayloadSettings = GHC.Maybe.Nothing}

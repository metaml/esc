-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AllocatorMoveRequest
module Model/Private/Elasticsearch.Types.AllocatorMoveRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.AllocatorMoveRequest@ in the specification.
-- 
-- As part of the upgrade plan, identifies the move requests for the Kibana instances or APM Servers on the allocators.
data AllocatorMoveRequest = AllocatorMoveRequest {
  -- | allocator_down: Tells the infrastructure that all instances on the allocator should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will auto-decide (currently: will treat the allocator as up)
  allocatorMoveRequestAllocatorDown :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | from: The allocator id off which all instances in the cluster should be moved
  , allocatorMoveRequestFrom :: Data.Text.Internal.Text
  -- | to: An optional list of allocator ids to which the instance(s) should be moved. If not specified then any available allocator can be used (including the current one if it is healthy)
  , allocatorMoveRequestTo :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AllocatorMoveRequest
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allocator_down" Data.Aeson.Types.ToJSON..=)) (allocatorMoveRequestAllocatorDown obj) : ["from" Data.Aeson.Types.ToJSON..= allocatorMoveRequestFrom obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("to" Data.Aeson.Types.ToJSON..=)) (allocatorMoveRequestTo obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allocator_down" Data.Aeson.Types.ToJSON..=)) (allocatorMoveRequestAllocatorDown obj) : ["from" Data.Aeson.Types.ToJSON..= allocatorMoveRequestFrom obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("to" Data.Aeson.Types.ToJSON..=)) (allocatorMoveRequestTo obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AllocatorMoveRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AllocatorMoveRequest" (\obj -> ((GHC.Base.pure AllocatorMoveRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allocator_down")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "to"))
-- | Create a new 'AllocatorMoveRequest' with all required fields.
mkAllocatorMoveRequest :: Data.Text.Internal.Text -- ^ 'allocatorMoveRequestFrom'
  -> AllocatorMoveRequest
mkAllocatorMoveRequest allocatorMoveRequestFrom = AllocatorMoveRequest{allocatorMoveRequestAllocatorDown = GHC.Maybe.Nothing,
                                                                       allocatorMoveRequestFrom = allocatorMoveRequestFrom,
                                                                       allocatorMoveRequestTo = GHC.Maybe.Nothing}

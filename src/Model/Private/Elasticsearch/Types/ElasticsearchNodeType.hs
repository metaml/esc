-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ElasticsearchNodeType
module Model/Private/Elasticsearch.Types.ElasticsearchNodeType where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.ElasticsearchNodeType@ in the specification.
-- 
-- Controls the combinations of Elasticsearch node types. TIP: By default, the Elasticsearch node is master eligible, can hold data, and run ingest pipelines. WARNING: Do not set for tiebreaker topologies.
data ElasticsearchNodeType = ElasticsearchNodeType {
  -- | data: Defines whether this node can hold data (default: false)
  elasticsearchNodeTypeData :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | ingest: Defines whether this node can run an ingest pipeline (default: false)
  , elasticsearchNodeTypeIngest :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | master: Defines whether this node can be elected master (default: false)
  , elasticsearchNodeTypeMaster :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | ml: Defines whether this node can run ml jobs, valid only for versions 5.4.0 or greater (default: false)
  , elasticsearchNodeTypeMl :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ElasticsearchNodeType
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("data" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ingest" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeIngest obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("master" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeMaster obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ml" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeMl obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("data" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ingest" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeIngest obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("master" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeMaster obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ml" Data.Aeson.Types.ToJSON..=)) (elasticsearchNodeTypeMl obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ElasticsearchNodeType
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ElasticsearchNodeType" (\obj -> (((GHC.Base.pure ElasticsearchNodeType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ingest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "master")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ml"))
-- | Create a new 'ElasticsearchNodeType' with all required fields.
mkElasticsearchNodeType :: ElasticsearchNodeType
mkElasticsearchNodeType = ElasticsearchNodeType{elasticsearchNodeTypeData = GHC.Maybe.Nothing,
                                                elasticsearchNodeTypeIngest = GHC.Maybe.Nothing,
                                                elasticsearchNodeTypeMaster = GHC.Maybe.Nothing,
                                                elasticsearchNodeTypeMl = GHC.Maybe.Nothing}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RollingStrategyConfig
module Model/Private/Elasticsearch.Types.RollingStrategyConfig where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.RollingStrategyConfig@ in the specification.
-- 
-- Performs inline, rolling configuration changes that mutate existing containers. TIP: This is the fastest way to update a plan, but can fail for complex plan changes, such as topology changes. Also, this is less safe for configuration changes that leave a cluster in a non running state. NOTE: When you perform a major version upgrade, and \'group_by\' is set to \'pass:macros[__all__]\';, rolling is required.
data RollingStrategyConfig = RollingStrategyConfig {
  -- | allow_inline_resize: Whether we allow changing the capacity of instances (default false). This is currently implemented by stopping, re-creating then starting the affected instance on its associated allocator when performing the changes. NOTES: This requires a round-trip through the allocation infrastructure of the active constructor, as it has to reserve the target capacity without over-committing
  rollingStrategyConfigAllowInlineResize :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | group_by: Specifies the grouping attribute to use when rolling several instances. Instances that share the same value for the provided attribute key are rolled together as a unit. Examples that make sense to use are \'\\_\\_all\\_\\_\' (roll all instances as a single unit), \'logical_zone_name\' (roll instances by zone), \'\\_\\_name\\_\\_\' (roll one instance at a time, the default if not specified). Note that \'\\_\\_all\\_\\_\' is required when performing a major version upgrade
  , rollingStrategyConfigGroupBy :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | shard_init_wait_time: The time, in seconds, to wait for shards that show no progress of initializing before rolling the next group (default: 10 minutes)
  , rollingStrategyConfigShardInitWaitTime :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | skip_synced_flush: Whether to skip attempting to do a synced flush on the filesystem of the container (default: false), which is less safe but may be required if the container is unhealthy
  , rollingStrategyConfigSkipSyncedFlush :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RollingStrategyConfig
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_inline_resize" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigAllowInlineResize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_by" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigGroupBy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shard_init_wait_time" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigShardInitWaitTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_synced_flush" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigSkipSyncedFlush obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_inline_resize" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigAllowInlineResize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_by" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigGroupBy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shard_init_wait_time" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigShardInitWaitTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_synced_flush" Data.Aeson.Types.ToJSON..=)) (rollingStrategyConfigSkipSyncedFlush obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON RollingStrategyConfig
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RollingStrategyConfig" (\obj -> (((GHC.Base.pure RollingStrategyConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_inline_resize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shard_init_wait_time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_synced_flush"))
-- | Create a new 'RollingStrategyConfig' with all required fields.
mkRollingStrategyConfig :: RollingStrategyConfig
mkRollingStrategyConfig = RollingStrategyConfig{rollingStrategyConfigAllowInlineResize = GHC.Maybe.Nothing,
                                                rollingStrategyConfigGroupBy = GHC.Maybe.Nothing,
                                                rollingStrategyConfigShardInitWaitTime = GHC.Maybe.Nothing,
                                                rollingStrategyConfigSkipSyncedFlush = GHC.Maybe.Nothing}

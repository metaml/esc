-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ElasticsearchScriptTypeSettings
module Model/Private/Elasticsearch.Types.ElasticsearchScriptTypeSettings where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias

-- | Defines the object schema located at @components.schemas.ElasticsearchScriptTypeSettings@ in the specification.
-- 
-- Enables scripting for the specified type and controls other parameters. Store scripts in indexes (\`stored\`), upload in file bundles (\`file\`), or use in API requests (\`inline\`).
data ElasticsearchScriptTypeSettings = ElasticsearchScriptTypeSettings {
  -- | enabled: If enabled (default: true) then scripts are enabled, either for sandboxing languages (by default), or for all installed languages if \'sandbox_mode\' is disabled (or for 6.x). NOTES: (Corresponds to the parameter \'script.file|stored\/indexed|inline\')
  elasticsearchScriptTypeSettingsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | sandbox_mode: If enabled (default: true) and this script type is enabled, then only the sandbox languages are allowed. By default the sandbox languages are painless, expressions and mustache, but this can be restricted via the \'painless_enabled\', \'mustache_enabled\' \'expression_enabled\' settings.NOTES: Not supported in 6.x. (Corresponds to the parameters \'script.engine.[painless|mustache|expressions].[file|stored|inline]\')
  , elasticsearchScriptTypeSettingsSandboxMode :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ElasticsearchScriptTypeSettings
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptTypeSettingsEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sandbox_mode" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptTypeSettingsSandboxMode obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptTypeSettingsEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sandbox_mode" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptTypeSettingsSandboxMode obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ElasticsearchScriptTypeSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ElasticsearchScriptTypeSettings" (\obj -> (GHC.Base.pure ElasticsearchScriptTypeSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sandbox_mode"))
-- | Create a new 'ElasticsearchScriptTypeSettings' with all required fields.
mkElasticsearchScriptTypeSettings :: ElasticsearchScriptTypeSettings
mkElasticsearchScriptTypeSettings = ElasticsearchScriptTypeSettings{elasticsearchScriptTypeSettingsEnabled = GHC.Maybe.Nothing,
                                                                    elasticsearchScriptTypeSettingsSandboxMode = GHC.Maybe.Nothing}

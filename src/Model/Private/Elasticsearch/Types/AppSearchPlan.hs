-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AppSearchPlan
module Model/Private/Elasticsearch.Types.AppSearchPlan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.AppSearchConfiguration
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.AppSearchTopologyElement
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.TransientAppSearchPlanConfiguration

-- | Defines the object schema located at @components.schemas.AppSearchPlan@ in the specification.
-- 
-- The plan for the App Search cluster.
data AppSearchPlan = AppSearchPlan {
  -- | appsearch
  appSearchPlanAppsearch :: AppSearchConfiguration
  -- | cluster_topology
  , appSearchPlanClusterTopology :: (GHC.Maybe.Maybe ([AppSearchTopologyElement]))
  -- | transient: Defines configuration parameters that control how the plan (ie consisting of the cluster topology and AppSearch settings) is applied
  , appSearchPlanTransient :: (GHC.Maybe.Maybe TransientAppSearchPlanConfiguration)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AppSearchPlan
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["appsearch" Data.Aeson.Types.ToJSON..= appSearchPlanAppsearch obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cluster_topology" Data.Aeson.Types.ToJSON..=)) (appSearchPlanClusterTopology obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transient" Data.Aeson.Types.ToJSON..=)) (appSearchPlanTransient obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["appsearch" Data.Aeson.Types.ToJSON..= appSearchPlanAppsearch obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cluster_topology" Data.Aeson.Types.ToJSON..=)) (appSearchPlanClusterTopology obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transient" Data.Aeson.Types.ToJSON..=)) (appSearchPlanTransient obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AppSearchPlan
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AppSearchPlan" (\obj -> ((GHC.Base.pure AppSearchPlan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "appsearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cluster_topology")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transient"))
-- | Create a new 'AppSearchPlan' with all required fields.
mkAppSearchPlan :: AppSearchConfiguration -- ^ 'appSearchPlanAppsearch'
  -> AppSearchPlan
mkAppSearchPlan appSearchPlanAppsearch = AppSearchPlan{appSearchPlanAppsearch = appSearchPlanAppsearch,
                                                       appSearchPlanClusterTopology = GHC.Maybe.Nothing,
                                                       appSearchPlanTransient = GHC.Maybe.Nothing}

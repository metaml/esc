-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ApmPayload
module Model/Private/Elasticsearch.Types.ApmPayload where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ApmPlan
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ApmSettings

-- | Defines the object schema located at @components.schemas.ApmPayload@ in the specification.
-- 
-- An APM creation request paired with the alias of the Elasticsearch cluster it should be paired with
data ApmPayload = ApmPayload {
  -- | display_name: The human readable name for the APM cluster (default: takes the name of its Elasticsearch cluster)
  apmPayloadDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | elasticsearch_cluster_ref_id: Alias to the Elasticsearch Cluster to attach APM to
  , apmPayloadElasticsearchClusterRefId :: Data.Text.Internal.Text
  -- | plan: The plan for the APM Server.
  , apmPayloadPlan :: ApmPlan
  -- | ref_id: A locally-unique user-specified id for APM
  , apmPayloadRefId :: Data.Text.Internal.Text
  -- | region: The region where this resource exists
  , apmPayloadRegion :: Data.Text.Internal.Text
  -- | settings: The settings for the APM Server.
  , apmPayloadSettings :: (GHC.Maybe.Maybe ApmSettings)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ApmPayload
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (apmPayloadDisplayName obj) : ["elasticsearch_cluster_ref_id" Data.Aeson.Types.ToJSON..= apmPayloadElasticsearchClusterRefId obj] : ["plan" Data.Aeson.Types.ToJSON..= apmPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= apmPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= apmPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (apmPayloadSettings obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (apmPayloadDisplayName obj) : ["elasticsearch_cluster_ref_id" Data.Aeson.Types.ToJSON..= apmPayloadElasticsearchClusterRefId obj] : ["plan" Data.Aeson.Types.ToJSON..= apmPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= apmPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= apmPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (apmPayloadSettings obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ApmPayload
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApmPayload" (\obj -> (((((GHC.Base.pure ApmPayload GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "elasticsearch_cluster_ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))
-- | Create a new 'ApmPayload' with all required fields.
mkApmPayload :: Data.Text.Internal.Text -- ^ 'apmPayloadElasticsearchClusterRefId'
  -> ApmPlan -- ^ 'apmPayloadPlan'
  -> Data.Text.Internal.Text -- ^ 'apmPayloadRefId'
  -> Data.Text.Internal.Text -- ^ 'apmPayloadRegion'
  -> ApmPayload
mkApmPayload apmPayloadElasticsearchClusterRefId apmPayloadPlan apmPayloadRefId apmPayloadRegion = ApmPayload{apmPayloadDisplayName = GHC.Maybe.Nothing,
                                                                                                              apmPayloadElasticsearchClusterRefId = apmPayloadElasticsearchClusterRefId,
                                                                                                              apmPayloadPlan = apmPayloadPlan,
                                                                                                              apmPayloadRefId = apmPayloadRefId,
                                                                                                              apmPayloadRegion = apmPayloadRegion,
                                                                                                              apmPayloadSettings = GHC.Maybe.Nothing}

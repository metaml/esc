-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ElasticsearchPayload
module Model/Private/Elasticsearch.Types.ElasticsearchPayload where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ElasticsearchClusterPlan
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ElasticsearchClusterSettings

-- | Defines the object schema located at @components.schemas.ElasticsearchPayload@ in the specification.
-- 
-- An alias for an Elasticsearch Cluster paired with a request for creating one
data ElasticsearchPayload = ElasticsearchPayload {
  -- | display_name: The human readable name for the cluster (defaults to the generated cluster id if not specified)
  elasticsearchPayloadDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | plan: The plan for the Elasticsearch cluster.
  , elasticsearchPayloadPlan :: ElasticsearchClusterPlan
  -- | ref_id: A locally-unique user-specified id for this Elasticsearch cluster
  , elasticsearchPayloadRefId :: Data.Text.Internal.Text
  -- | region: The region where this resource exists
  , elasticsearchPayloadRegion :: Data.Text.Internal.Text
  -- | settings: The settings for an Elasticsearch cluster.
  , elasticsearchPayloadSettings :: (GHC.Maybe.Maybe ElasticsearchClusterSettings)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ElasticsearchPayload
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (elasticsearchPayloadDisplayName obj) : ["plan" Data.Aeson.Types.ToJSON..= elasticsearchPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= elasticsearchPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= elasticsearchPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (elasticsearchPayloadSettings obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (elasticsearchPayloadDisplayName obj) : ["plan" Data.Aeson.Types.ToJSON..= elasticsearchPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= elasticsearchPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= elasticsearchPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (elasticsearchPayloadSettings obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ElasticsearchPayload
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ElasticsearchPayload" (\obj -> ((((GHC.Base.pure ElasticsearchPayload GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))
-- | Create a new 'ElasticsearchPayload' with all required fields.
mkElasticsearchPayload :: ElasticsearchClusterPlan -- ^ 'elasticsearchPayloadPlan'
  -> Data.Text.Internal.Text -- ^ 'elasticsearchPayloadRefId'
  -> Data.Text.Internal.Text -- ^ 'elasticsearchPayloadRegion'
  -> ElasticsearchPayload
mkElasticsearchPayload elasticsearchPayloadPlan elasticsearchPayloadRefId elasticsearchPayloadRegion = ElasticsearchPayload{elasticsearchPayloadDisplayName = GHC.Maybe.Nothing,
                                                                                                                            elasticsearchPayloadPlan = elasticsearchPayloadPlan,
                                                                                                                            elasticsearchPayloadRefId = elasticsearchPayloadRefId,
                                                                                                                            elasticsearchPayloadRegion = elasticsearchPayloadRegion,
                                                                                                                            elasticsearchPayloadSettings = GHC.Maybe.Nothing}

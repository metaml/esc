-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema KibanaPayload
module Model/Private/Elasticsearch.Types.KibanaPayload where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.KibanaClusterPlan
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.KibanaClusterSettings

-- | Defines the object schema located at @components.schemas.KibanaPayload@ in the specification.
-- 
-- A Kibana creation request paired with the alias of the Elasticsearch cluster it should be paired with
data KibanaPayload = KibanaPayload {
  -- | display_name: The human readable name for the Kibana cluster (default: takes the name of its Elasticsearch cluster)
  kibanaPayloadDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | elasticsearch_cluster_ref_id: Alias to the Elasticsearch Cluster to attach Kibana to
  , kibanaPayloadElasticsearchClusterRefId :: Data.Text.Internal.Text
  -- | plan: The plan for the Kibana instance.
  , kibanaPayloadPlan :: KibanaClusterPlan
  -- | ref_id: A locally-unique user-specified id for Kibana
  , kibanaPayloadRefId :: Data.Text.Internal.Text
  -- | region: The region where this resource exists
  , kibanaPayloadRegion :: Data.Text.Internal.Text
  -- | settings: The settings for multiple Kibana instances.
  , kibanaPayloadSettings :: (GHC.Maybe.Maybe KibanaClusterSettings)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KibanaPayload
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (kibanaPayloadDisplayName obj) : ["elasticsearch_cluster_ref_id" Data.Aeson.Types.ToJSON..= kibanaPayloadElasticsearchClusterRefId obj] : ["plan" Data.Aeson.Types.ToJSON..= kibanaPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= kibanaPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= kibanaPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (kibanaPayloadSettings obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (kibanaPayloadDisplayName obj) : ["elasticsearch_cluster_ref_id" Data.Aeson.Types.ToJSON..= kibanaPayloadElasticsearchClusterRefId obj] : ["plan" Data.Aeson.Types.ToJSON..= kibanaPayloadPlan obj] : ["ref_id" Data.Aeson.Types.ToJSON..= kibanaPayloadRefId obj] : ["region" Data.Aeson.Types.ToJSON..= kibanaPayloadRegion obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (kibanaPayloadSettings obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON KibanaPayload
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "KibanaPayload" (\obj -> (((((GHC.Base.pure KibanaPayload GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "elasticsearch_cluster_ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ref_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "region")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))
-- | Create a new 'KibanaPayload' with all required fields.
mkKibanaPayload :: Data.Text.Internal.Text -- ^ 'kibanaPayloadElasticsearchClusterRefId'
  -> KibanaClusterPlan -- ^ 'kibanaPayloadPlan'
  -> Data.Text.Internal.Text -- ^ 'kibanaPayloadRefId'
  -> Data.Text.Internal.Text -- ^ 'kibanaPayloadRegion'
  -> KibanaPayload
mkKibanaPayload kibanaPayloadElasticsearchClusterRefId kibanaPayloadPlan kibanaPayloadRefId kibanaPayloadRegion = KibanaPayload{kibanaPayloadDisplayName = GHC.Maybe.Nothing,
                                                                                                                                kibanaPayloadElasticsearchClusterRefId = kibanaPayloadElasticsearchClusterRefId,
                                                                                                                                kibanaPayloadPlan = kibanaPayloadPlan,
                                                                                                                                kibanaPayloadRefId = kibanaPayloadRefId,
                                                                                                                                kibanaPayloadRegion = kibanaPayloadRegion,
                                                                                                                                kibanaPayloadSettings = GHC.Maybe.Nothing}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema ElasticsearchScriptingUserSettings
module Model/Private/Elasticsearch.Types.ElasticsearchScriptingUserSettings where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.ElasticsearchScriptTypeSettings

-- | Defines the object schema located at @components.schemas.ElasticsearchScriptingUserSettings@ in the specification.
-- 
-- Controls the languages supported by the Elasticsearch cluster, such as Painless, Mustache, and Expressions. Controls how the languages are used, such as file, index, and inline. TIP: For complex configurations, leave these blank and configure these settings in the user YAML or JSON.
data ElasticsearchScriptingUserSettings = ElasticsearchScriptingUserSettings {
  -- | expressions_enabled: (5.x+ only) If enabled (the default) then the expressions scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if \'sandbox_mode\' is set to true. NOTES: (Corresponds to the parameters \'script.engine.expression.[file|stored|inline]\')
  elasticsearchScriptingUserSettingsExpressionsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | file: Enables scripting for the specified type and controls other parameters. Store scripts in indexes (\`stored\`), upload in file bundles (\`file\`), or use in API requests (\`inline\`).
  , elasticsearchScriptingUserSettingsFile :: (GHC.Maybe.Maybe ElasticsearchScriptTypeSettings)
  -- | inline: Enables scripting for the specified type and controls other parameters. Store scripts in indexes (\`stored\`), upload in file bundles (\`file\`), or use in API requests (\`inline\`).
  , elasticsearchScriptingUserSettingsInline :: (GHC.Maybe.Maybe ElasticsearchScriptTypeSettings)
  -- | mustache_enabled: (5.x+ only) If enabled (the default) then the mustache scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if \'sandbox_mode\' is set to true. NOTES: (Corresponds to the parameters \'script.engine.mustache.[file|stored|inline]\')
  , elasticsearchScriptingUserSettingsMustacheEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | painless_enabled: (5.x+ only) If enabled (the default) then the painless scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if \'sandbox_mode\' is set to true. NOTES: (Corresponds to the parameters \'script.engine.painless.[file|stored|inline]\')
  , elasticsearchScriptingUserSettingsPainlessEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | stored: Enables scripting for the specified type and controls other parameters. Store scripts in indexes (\`stored\`), upload in file bundles (\`file\`), or use in API requests (\`inline\`).
  , elasticsearchScriptingUserSettingsStored :: (GHC.Maybe.Maybe ElasticsearchScriptTypeSettings)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ElasticsearchScriptingUserSettings
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expressions_enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsExpressionsEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("file" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsFile obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inline" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsInline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mustache_enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsMustacheEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("painless_enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsPainlessEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsStored obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expressions_enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsExpressionsEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("file" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsFile obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inline" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsInline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mustache_enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsMustacheEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("painless_enabled" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsPainlessEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stored" Data.Aeson.Types.ToJSON..=)) (elasticsearchScriptingUserSettingsStored obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ElasticsearchScriptingUserSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ElasticsearchScriptingUserSettings" (\obj -> (((((GHC.Base.pure ElasticsearchScriptingUserSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expressions_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "file")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "inline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mustache_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "painless_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stored"))
-- | Create a new 'ElasticsearchScriptingUserSettings' with all required fields.
mkElasticsearchScriptingUserSettings :: ElasticsearchScriptingUserSettings
mkElasticsearchScriptingUserSettings = ElasticsearchScriptingUserSettings{elasticsearchScriptingUserSettingsExpressionsEnabled = GHC.Maybe.Nothing,
                                                                          elasticsearchScriptingUserSettingsFile = GHC.Maybe.Nothing,
                                                                          elasticsearchScriptingUserSettingsInline = GHC.Maybe.Nothing,
                                                                          elasticsearchScriptingUserSettingsMustacheEnabled = GHC.Maybe.Nothing,
                                                                          elasticsearchScriptingUserSettingsPainlessEnabled = GHC.Maybe.Nothing,
                                                                          elasticsearchScriptingUserSettingsStored = GHC.Maybe.Nothing}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AppSearchTopologyElement
module Model/Private/Elasticsearch.Types.AppSearchTopologyElement where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.AppSearchConfiguration
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.AppSearchNodeTypes
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.TopologySize

-- | Defines the object schema located at @components.schemas.AppSearchTopologyElement@ in the specification.
-- 
-- Defines the topology of the AppSearch nodes (eg number\/capacity of nodes, and where they can be allocated)
data AppSearchTopologyElement = AppSearchTopologyElement {
  -- | appsearch
  appSearchTopologyElementAppsearch :: (GHC.Maybe.Maybe AppSearchConfiguration)
  -- | instance_configuration_id: Controls the allocation of this topology element as well as allowed sizes and node_types. It needs to match the id of an existing instance configuration.
  , appSearchTopologyElementInstanceConfigurationId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | node_type: Node types to enable for an AppSearch instance
  , appSearchTopologyElementNodeType :: (GHC.Maybe.Maybe AppSearchNodeTypes)
  -- | size: Measured by the amount of a resource. The final cluster size is calculated using multipliers from the topology instance configuration.
  , appSearchTopologyElementSize :: (GHC.Maybe.Maybe TopologySize)
  -- | zone_count: number of zones in which nodes will be placed
  , appSearchTopologyElementZoneCount :: (GHC.Maybe.Maybe GHC.Int.Int32)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AppSearchTopologyElement
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("appsearch" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementAppsearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instance_configuration_id" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementInstanceConfigurationId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_type" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementNodeType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zone_count" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementZoneCount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("appsearch" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementAppsearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instance_configuration_id" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementInstanceConfigurationId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("node_type" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementNodeType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("size" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zone_count" Data.Aeson.Types.ToJSON..=)) (appSearchTopologyElementZoneCount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON AppSearchTopologyElement
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AppSearchTopologyElement" (\obj -> ((((GHC.Base.pure AppSearchTopologyElement GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "appsearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instance_configuration_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "node_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zone_count"))
-- | Create a new 'AppSearchTopologyElement' with all required fields.
mkAppSearchTopologyElement :: AppSearchTopologyElement
mkAppSearchTopologyElement = AppSearchTopologyElement{appSearchTopologyElementAppsearch = GHC.Maybe.Nothing,
                                                      appSearchTopologyElementInstanceConfigurationId = GHC.Maybe.Nothing,
                                                      appSearchTopologyElementNodeType = GHC.Maybe.Nothing,
                                                      appSearchTopologyElementSize = GHC.Maybe.Nothing,
                                                      appSearchTopologyElementZoneCount = GHC.Maybe.Nothing}

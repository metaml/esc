-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema NestedQuery
module Model/Private/Elasticsearch.Types.NestedQuery where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.TypeAlias
import {-# SOURCE #-} Model/Private/Elasticsearch.Types.QueryContainer

-- | Defines the object schema located at @components.schemas.NestedQuery@ in the specification.
-- 
-- A query that matches nested objects.
data NestedQuery = NestedQuery {
  -- | path: The path to the nested object.
  nestedQueryPath :: Data.Text.Internal.Text
  -- | query: The container for all of the allowed Elasticsearch queries. Specify only one property each time.
  , nestedQueryQuery :: QueryContainer
  -- | score_mode: Allows to specify how inner children matching affects score of the parent. Refer to the Elasticsearch documentation for details.
  , nestedQueryScoreMode :: (GHC.Maybe.Maybe NestedQueryScoreMode)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NestedQuery
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["path" Data.Aeson.Types.ToJSON..= nestedQueryPath obj] : ["query" Data.Aeson.Types.ToJSON..= nestedQueryQuery obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_mode" Data.Aeson.Types.ToJSON..=)) (nestedQueryScoreMode obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["path" Data.Aeson.Types.ToJSON..= nestedQueryPath obj] : ["query" Data.Aeson.Types.ToJSON..= nestedQueryQuery obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_mode" Data.Aeson.Types.ToJSON..=)) (nestedQueryScoreMode obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON NestedQuery
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "NestedQuery" (\obj -> ((GHC.Base.pure NestedQuery GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "query")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_mode"))
-- | Create a new 'NestedQuery' with all required fields.
mkNestedQuery :: Data.Text.Internal.Text -- ^ 'nestedQueryPath'
  -> QueryContainer -- ^ 'nestedQueryQuery'
  -> NestedQuery
mkNestedQuery nestedQueryPath nestedQueryQuery = NestedQuery{nestedQueryPath = nestedQueryPath,
                                                             nestedQueryQuery = nestedQueryQuery,
                                                             nestedQueryScoreMode = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.NestedQuery.properties.score_mode@ in the specification.
-- 
-- Allows to specify how inner children matching affects score of the parent. Refer to the Elasticsearch documentation for details.
data NestedQueryScoreMode =
   NestedQueryScoreModeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | NestedQueryScoreModeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | NestedQueryScoreModeEnumAvg -- ^ Represents the JSON value @"avg"@
  | NestedQueryScoreModeEnumSum -- ^ Represents the JSON value @"sum"@
  | NestedQueryScoreModeEnumMin -- ^ Represents the JSON value @"min"@
  | NestedQueryScoreModeEnumMax -- ^ Represents the JSON value @"max"@
  | NestedQueryScoreModeEnumNone -- ^ Represents the JSON value @"none"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON NestedQueryScoreMode
    where toJSON (NestedQueryScoreModeOther val) = val
          toJSON (NestedQueryScoreModeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (NestedQueryScoreModeEnumAvg) = "avg"
          toJSON (NestedQueryScoreModeEnumSum) = "sum"
          toJSON (NestedQueryScoreModeEnumMin) = "min"
          toJSON (NestedQueryScoreModeEnumMax) = "max"
          toJSON (NestedQueryScoreModeEnumNone) = "none"
instance Data.Aeson.Types.FromJSON.FromJSON NestedQueryScoreMode
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "avg" -> NestedQueryScoreModeEnumAvg
                                            | val GHC.Classes.== "sum" -> NestedQueryScoreModeEnumSum
                                            | val GHC.Classes.== "min" -> NestedQueryScoreModeEnumMin
                                            | val GHC.Classes.== "max" -> NestedQueryScoreModeEnumMax
                                            | val GHC.Classes.== "none" -> NestedQueryScoreModeEnumNone
                                            | GHC.Base.otherwise -> NestedQueryScoreModeOther val)

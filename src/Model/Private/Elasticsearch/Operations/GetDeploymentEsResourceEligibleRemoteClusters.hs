-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getDeploymentEsResourceEligibleRemoteClusters
module Model/Private/Elasticsearch.Operations.GetDeploymentEsResourceEligibleRemoteClusters where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > POST /deployments/{deployment_id}/elasticsearch/{ref_id}/eligible-remote-clusters
-- 
-- Returns the list of deployments which contain eligible remote clusters for the elasticsearch resource.
getDeploymentEsResourceEligibleRemoteClusters :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetDeploymentEsResourceEligibleRemoteClustersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe SearchRequest -- ^ The request body to send
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response GetDeploymentEsResourceEligibleRemoteClustersResponse) -- ^ Monadic computation which returns the result of the operation
getDeploymentEsResourceEligibleRemoteClusters parameters
                                              body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetDeploymentEsResourceEligibleRemoteClustersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetDeploymentEsResourceEligibleRemoteClustersResponse200
                                                                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetDeploymentEsResourceEligibleRemoteClustersResponse400
                                                                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetDeploymentEsResourceEligibleRemoteClustersResponse404
                                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId parameters))) GHC.Base.++ "/eligible-remote-clusters"))))) GHC.Base.mempty body Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/deployments\/{deployment_id}\/elasticsearch\/{ref_id}\/eligible-remote-clusters.POST.parameters@ in the specification.
-- 
-- 
data GetDeploymentEsResourceEligibleRemoteClustersParameters = GetDeploymentEsResourceEligibleRemoteClustersParameters {
  -- | pathDeployment_id: Represents the parameter named \'deployment_id\'
  -- 
  -- Identifier for the Deployment.
  getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId :: Data.Text.Internal.Text
  -- | pathRef_id: Represents the parameter named \'ref_id\'
  -- 
  -- User-specified RefId for the Resource.
  , getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetDeploymentEsResourceEligibleRemoteClustersParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetDeploymentEsResourceEligibleRemoteClustersParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetDeploymentEsResourceEligibleRemoteClustersParameters" (\obj -> (GHC.Base.pure GetDeploymentEsResourceEligibleRemoteClustersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDeployment_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRef_id"))
-- | Create a new 'GetDeploymentEsResourceEligibleRemoteClustersParameters' with all required fields.
mkGetDeploymentEsResourceEligibleRemoteClustersParameters :: Data.Text.Internal.Text -- ^ 'getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId'
  -> Data.Text.Internal.Text -- ^ 'getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId'
  -> GetDeploymentEsResourceEligibleRemoteClustersParameters
mkGetDeploymentEsResourceEligibleRemoteClustersParameters getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId = GetDeploymentEsResourceEligibleRemoteClustersParameters{getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId = getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId,
                                                                                                                                                                                                                                                             getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId = getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId}
-- | Represents a response of the operation 'getDeploymentEsResourceEligibleRemoteClusters'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetDeploymentEsResourceEligibleRemoteClustersResponseError' is used.
data GetDeploymentEsResourceEligibleRemoteClustersResponse =
   GetDeploymentEsResourceEligibleRemoteClustersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetDeploymentEsResourceEligibleRemoteClustersResponse200 -- ^ List of deployments which contains eligible remote clusters for the resource
  | GetDeploymentEsResourceEligibleRemoteClustersResponse400 -- ^ The resource specified doesn\'t yet have a valid version for the current plan or the pending plan. (code: \`deployments.resource_does_not_have_a_valid_version\`)
  | GetDeploymentEsResourceEligibleRemoteClustersResponse404 -- ^ * The Deployment specified by {deployment_id} cannot be found. (code: \`deployments.deployment_not_found\`) * The Resource specified by {ref_id} cannot be found. (code: \`deployments.deployment_resource_not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /deployments/{deployment_id}/elasticsearch/{ref_id}/eligible-remote-clusters
-- 
-- The same as 'getDeploymentEsResourceEligibleRemoteClusters' but accepts an explicit configuration.
getDeploymentEsResourceEligibleRemoteClustersWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetDeploymentEsResourceEligibleRemoteClustersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe SearchRequest -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response GetDeploymentEsResourceEligibleRemoteClustersResponse) -- ^ Monadic computation which returns the result of the operation
getDeploymentEsResourceEligibleRemoteClustersWithConfiguration config
                                                               parameters
                                                               body = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either GetDeploymentEsResourceEligibleRemoteClustersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetDeploymentEsResourceEligibleRemoteClustersResponse200
                                                                                                                                                                                                                                              | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetDeploymentEsResourceEligibleRemoteClustersResponse400
                                                                                                                                                                                                                                              | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetDeploymentEsResourceEligibleRemoteClustersResponse404
                                                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (Model/Private/Elasticsearch.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId parameters))) GHC.Base.++ "/eligible-remote-clusters"))))) GHC.Base.mempty body Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | > POST /deployments/{deployment_id}/elasticsearch/{ref_id}/eligible-remote-clusters
-- 
-- The same as 'getDeploymentEsResourceEligibleRemoteClusters' but returns the raw 'Data.ByteString.Char8.ByteString'.
getDeploymentEsResourceEligibleRemoteClustersRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetDeploymentEsResourceEligibleRemoteClustersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe SearchRequest -- ^ The request body to send
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getDeploymentEsResourceEligibleRemoteClustersRaw parameters
                                                 body = GHC.Base.id (Model/Private/Elasticsearch.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId parameters))) GHC.Base.++ "/eligible-remote-clusters"))))) GHC.Base.mempty body Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | > POST /deployments/{deployment_id}/elasticsearch/{ref_id}/eligible-remote-clusters
-- 
-- The same as 'getDeploymentEsResourceEligibleRemoteClusters' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getDeploymentEsResourceEligibleRemoteClustersWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetDeploymentEsResourceEligibleRemoteClustersParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> GHC.Maybe.Maybe SearchRequest -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getDeploymentEsResourceEligibleRemoteClustersWithConfigurationRaw config
                                                                  parameters
                                                                  body = GHC.Base.id (Model/Private/Elasticsearch.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getDeploymentEsResourceEligibleRemoteClustersParametersPathRefId parameters))) GHC.Base.++ "/eligible-remote-clusters"))))) GHC.Base.mempty body Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)

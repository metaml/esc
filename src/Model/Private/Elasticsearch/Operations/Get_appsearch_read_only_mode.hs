-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_appsearch_read_only_mode
module Model/Private/Elasticsearch.Operations.Get_appsearch_read_only_mode where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > GET /deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode
-- 
-- Enable\/Disable read-only mode on the given App Search resource.
get_appsearch_read_only_mode :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Get_appsearch_read_only_modeParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Get_appsearch_read_only_modeResponse) -- ^ Monadic computation which returns the result of the operation
get_appsearch_read_only_mode parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_appsearch_read_only_modeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_appsearch_read_only_modeResponse200
                                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_appsearch_read_only_modeResponse404
                                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_appsearch_read_only_modeResponse500
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathDeployment_id parameters))) GHC.Base.++ ("/appsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathRef_id parameters))) GHC.Base.++ "/read_only_mode"))))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/deployments\/{deployment_id}\/appsearch\/{ref_id}\/read_only_mode.GET.parameters@ in the specification.
-- 
-- 
data Get_appsearch_read_only_modeParameters = Get_appsearch_read_only_modeParameters {
  -- | pathDeployment_id: Represents the parameter named \'deployment_id\'
  -- 
  -- Identifier for the Deployment.
  get_appsearch_read_only_modeParametersPathDeployment_id :: Data.Text.Internal.Text
  -- | pathRef_id: Represents the parameter named \'ref_id\'
  -- 
  -- User-specified RefId for the Resource.
  , get_appsearch_read_only_modeParametersPathRef_id :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Get_appsearch_read_only_modeParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= get_appsearch_read_only_modeParametersPathDeployment_id obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= get_appsearch_read_only_modeParametersPathRef_id obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= get_appsearch_read_only_modeParametersPathDeployment_id obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= get_appsearch_read_only_modeParametersPathRef_id obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Get_appsearch_read_only_modeParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Get_appsearch_read_only_modeParameters" (\obj -> (GHC.Base.pure Get_appsearch_read_only_modeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDeployment_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRef_id"))
-- | Create a new 'Get_appsearch_read_only_modeParameters' with all required fields.
mkGet_appsearch_read_only_modeParameters :: Data.Text.Internal.Text -- ^ 'get_appsearch_read_only_modeParametersPathDeployment_id'
  -> Data.Text.Internal.Text -- ^ 'get_appsearch_read_only_modeParametersPathRef_id'
  -> Get_appsearch_read_only_modeParameters
mkGet_appsearch_read_only_modeParameters get_appsearch_read_only_modeParametersPathDeployment_id get_appsearch_read_only_modeParametersPathRef_id = Get_appsearch_read_only_modeParameters{get_appsearch_read_only_modeParametersPathDeployment_id = get_appsearch_read_only_modeParametersPathDeployment_id,
                                                                                                                                                                                           get_appsearch_read_only_modeParametersPathRef_id = get_appsearch_read_only_modeParametersPathRef_id}
-- | Represents a response of the operation 'get_appsearch_read_only_mode'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_appsearch_read_only_modeResponseError' is used.
data Get_appsearch_read_only_modeResponse =
   Get_appsearch_read_only_modeResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_appsearch_read_only_modeResponse200 -- ^ Standard response
  | Get_appsearch_read_only_modeResponse404 -- ^ The Resource specified by ref_id cannot be found. (code: \`deployments.deployment_resource_not_found\`)
  | Get_appsearch_read_only_modeResponse500 -- ^ We have failed you. (code: \`deployments.deployment_resource_no_longer_exists\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode
-- 
-- The same as 'get_appsearch_read_only_mode' but accepts an explicit configuration.
get_appsearch_read_only_modeWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Get_appsearch_read_only_modeParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Get_appsearch_read_only_modeResponse) -- ^ Monadic computation which returns the result of the operation
get_appsearch_read_only_modeWithConfiguration config
                                              parameters = GHC.Base.fmap (\response_4 -> GHC.Base.fmap (Data.Either.either Get_appsearch_read_only_modeResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_appsearch_read_only_modeResponse200
                                                                                                                                                                                                                  | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_appsearch_read_only_modeResponse404
                                                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_appsearch_read_only_modeResponse500
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_4) response_4) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathDeployment_id parameters))) GHC.Base.++ ("/appsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathRef_id parameters))) GHC.Base.++ "/read_only_mode"))))) GHC.Base.mempty)
-- | > GET /deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode
-- 
-- The same as 'get_appsearch_read_only_mode' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_appsearch_read_only_modeRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Get_appsearch_read_only_modeParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_appsearch_read_only_modeRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathDeployment_id parameters))) GHC.Base.++ ("/appsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathRef_id parameters))) GHC.Base.++ "/read_only_mode"))))) GHC.Base.mempty)
-- | > GET /deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode
-- 
-- The same as 'get_appsearch_read_only_mode' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_appsearch_read_only_modeWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Get_appsearch_read_only_modeParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_appsearch_read_only_modeWithConfigurationRaw config
                                                 parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathDeployment_id parameters))) GHC.Base.++ ("/appsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (get_appsearch_read_only_modeParametersPathRef_id parameters))) GHC.Base.++ "/read_only_mode"))))) GHC.Base.mempty)

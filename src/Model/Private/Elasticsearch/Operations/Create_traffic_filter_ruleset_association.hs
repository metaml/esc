-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation create_traffic_filter_ruleset_association
module Model/Private/Elasticsearch.Operations.Create_traffic_filter_ruleset_association where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > POST /deployments/traffic-filter/rulesets/{ruleset_id}/associations
-- 
-- Applies the ruleset to the specified deployment.
create_traffic_filter_ruleset_association :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ ruleset_id: The mandatory ruleset ID.
  -> FilterAssociation -- ^ The request body to send
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Create_traffic_filter_ruleset_associationResponse) -- ^ Monadic computation which returns the result of the operation
create_traffic_filter_ruleset_association ruleset_id
                                          body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Create_traffic_filter_ruleset_associationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse200
                                                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse201
                                                                                                                                                                                                                     | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse404
                                                                                                                                                                                                                     | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse500
                                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/traffic-filter/rulesets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel ruleset_id)) GHC.Base.++ "/associations"))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | Represents a response of the operation 'create_traffic_filter_ruleset_association'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Create_traffic_filter_ruleset_associationResponseError' is used.
data Create_traffic_filter_ruleset_associationResponse =
   Create_traffic_filter_ruleset_associationResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Create_traffic_filter_ruleset_associationResponse200 -- ^ Create association request was valid and the association already exists
  | Create_traffic_filter_ruleset_associationResponse201 -- ^ Create association request was valid and the association has been created
  | Create_traffic_filter_ruleset_associationResponse404 -- ^ The traffic filter ruleset specified by {ruleset_id} cannot be found. (code: \`traffic_filter.not_found\`)
  | Create_traffic_filter_ruleset_associationResponse500 -- ^ Creation failed. (code: \`traffic_filter.request_execution_failed\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /deployments/traffic-filter/rulesets/{ruleset_id}/associations
-- 
-- The same as 'create_traffic_filter_ruleset_association' but accepts an explicit configuration.
create_traffic_filter_ruleset_associationWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ ruleset_id: The mandatory ruleset ID.
  -> FilterAssociation -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Create_traffic_filter_ruleset_associationResponse) -- ^ Monadic computation which returns the result of the operation
create_traffic_filter_ruleset_associationWithConfiguration config
                                                           ruleset_id
                                                           body = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either Create_traffic_filter_ruleset_associationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse200
                                                                                                                                                                                                                                      | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 201) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse201
                                                                                                                                                                                                                                      | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse404
                                                                                                                                                                                                                                      | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Create_traffic_filter_ruleset_associationResponse500
                                                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Model/Private/Elasticsearch.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/traffic-filter/rulesets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel ruleset_id)) GHC.Base.++ "/associations"))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | > POST /deployments/traffic-filter/rulesets/{ruleset_id}/associations
-- 
-- The same as 'create_traffic_filter_ruleset_association' but returns the raw 'Data.ByteString.Char8.ByteString'.
create_traffic_filter_ruleset_associationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ ruleset_id: The mandatory ruleset ID.
  -> FilterAssociation -- ^ The request body to send
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
create_traffic_filter_ruleset_associationRaw ruleset_id
                                             body = GHC.Base.id (Model/Private/Elasticsearch.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/traffic-filter/rulesets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel ruleset_id)) GHC.Base.++ "/associations"))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | > POST /deployments/traffic-filter/rulesets/{ruleset_id}/associations
-- 
-- The same as 'create_traffic_filter_ruleset_association' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
create_traffic_filter_ruleset_associationWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ ruleset_id: The mandatory ruleset ID.
  -> FilterAssociation -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
create_traffic_filter_ruleset_associationWithConfigurationRaw config
                                                              ruleset_id
                                                              body = GHC.Base.id (Model/Private/Elasticsearch.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/traffic-filter/rulesets/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel ruleset_id)) GHC.Base.++ "/associations"))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)

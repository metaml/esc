-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getTrafficFilterRulesets
module Model/Private/Elasticsearch.Operations.GetTrafficFilterRulesets where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > GET /deployments/traffic-filter/rulesets
-- 
-- List all of the traffic filter rulesets.
getTrafficFilterRulesets :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetTrafficFilterRulesetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response GetTrafficFilterRulesetsResponse) -- ^ Monadic computation which returns the result of the operation
getTrafficFilterRulesets parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetTrafficFilterRulesetsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetTrafficFilterRulesetsResponse200
                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetTrafficFilterRulesetsResponse500
                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/deployments/traffic-filter/rulesets") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_associations") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryIncludeAssociations parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                 Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "region") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryRegion parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/deployments\/traffic-filter\/rulesets.GET.parameters@ in the specification.
-- 
-- 
data GetTrafficFilterRulesetsParameters = GetTrafficFilterRulesetsParameters {
  -- | queryInclude_associations: Represents the parameter named \'include_associations\'
  -- 
  -- Retrieves a list of resources that are associated to the specified ruleset.
  getTrafficFilterRulesetsParametersQueryIncludeAssociations :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | queryRegion: Represents the parameter named \'region\'
  -- 
  -- If provided limits the rulesets to that region only.
  , getTrafficFilterRulesetsParametersQueryRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetTrafficFilterRulesetsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInclude_associations" Data.Aeson.Types.ToJSON..=)) (getTrafficFilterRulesetsParametersQueryIncludeAssociations obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRegion" Data.Aeson.Types.ToJSON..=)) (getTrafficFilterRulesetsParametersQueryRegion obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInclude_associations" Data.Aeson.Types.ToJSON..=)) (getTrafficFilterRulesetsParametersQueryIncludeAssociations obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRegion" Data.Aeson.Types.ToJSON..=)) (getTrafficFilterRulesetsParametersQueryRegion obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetTrafficFilterRulesetsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTrafficFilterRulesetsParameters" (\obj -> (GHC.Base.pure GetTrafficFilterRulesetsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryInclude_associations")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRegion"))
-- | Create a new 'GetTrafficFilterRulesetsParameters' with all required fields.
mkGetTrafficFilterRulesetsParameters :: GetTrafficFilterRulesetsParameters
mkGetTrafficFilterRulesetsParameters = GetTrafficFilterRulesetsParameters{getTrafficFilterRulesetsParametersQueryIncludeAssociations = GHC.Maybe.Nothing,
                                                                          getTrafficFilterRulesetsParametersQueryRegion = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getTrafficFilterRulesets'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTrafficFilterRulesetsResponseError' is used.
data GetTrafficFilterRulesetsResponse =
   GetTrafficFilterRulesetsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetTrafficFilterRulesetsResponse200 -- ^ The collection of traffic filter routes
  | GetTrafficFilterRulesetsResponse500 -- ^ Error fetching traffic filter rulesets. (code: \`traffic_filter.request_execution_failed\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /deployments/traffic-filter/rulesets
-- 
-- The same as 'getTrafficFilterRulesets' but accepts an explicit configuration.
getTrafficFilterRulesetsWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetTrafficFilterRulesetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetTrafficFilterRulesetsResponse) -- ^ Monadic computation which returns the result of the operation
getTrafficFilterRulesetsWithConfiguration config
                                          parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either GetTrafficFilterRulesetsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetTrafficFilterRulesetsResponse200
                                                                                                                                                                                                          | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetTrafficFilterRulesetsResponse500
                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/deployments/traffic-filter/rulesets") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_associations") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryIncludeAssociations parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "region") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryRegion parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /deployments/traffic-filter/rulesets
-- 
-- The same as 'getTrafficFilterRulesets' but returns the raw 'Data.ByteString.Char8.ByteString'.
getTrafficFilterRulesetsRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetTrafficFilterRulesetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTrafficFilterRulesetsRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/deployments/traffic-filter/rulesets") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_associations") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryIncludeAssociations parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                           Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "region") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryRegion parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /deployments/traffic-filter/rulesets
-- 
-- The same as 'getTrafficFilterRulesets' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getTrafficFilterRulesetsWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetTrafficFilterRulesetsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getTrafficFilterRulesetsWithConfigurationRaw config
                                             parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/deployments/traffic-filter/rulesets") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_associations") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryIncludeAssociations parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                  Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "region") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTrafficFilterRulesetsParametersQueryRegion parameters) (Data.Text.pack "form") GHC.Types.False])

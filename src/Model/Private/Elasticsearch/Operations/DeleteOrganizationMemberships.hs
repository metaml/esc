-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation deleteOrganizationMemberships
module Model/Private/Elasticsearch.Operations.DeleteOrganizationMemberships where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- Deletes one or more organization memberships. Currently unavailable in self-hosted ECE.
deleteOrganizationMemberships :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => DeleteOrganizationMembershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteOrganizationMembershipsResponse) -- ^ Monadic computation which returns the result of the operation
deleteOrganizationMemberships parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either DeleteOrganizationMembershipsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right DeleteOrganizationMembershipsResponse200
                                                                                                                                                                                                   | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right DeleteOrganizationMembershipsResponse404
                                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathOrganizationId parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathUserIds parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteOrganizationMembershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/organizations\/{organization_id}\/members\/{user_ids}.DELETE.parameters@ in the specification.
-- 
-- 
data DeleteOrganizationMembershipsParameters = DeleteOrganizationMembershipsParameters {
  -- | pathOrganization_id: Represents the parameter named \'organization_id\'
  -- 
  -- Identifier for the Organization
  deleteOrganizationMembershipsParametersPathOrganizationId :: Data.Text.Internal.Text
  -- | pathUser_ids: Represents the parameter named \'user_ids\'
  -- 
  -- CSV list of User identifiers
  , deleteOrganizationMembershipsParametersPathUserIds :: Data.Text.Internal.Text
  -- | queryForce: Represents the parameter named \'force\'
  -- 
  -- Whether or not to force the removal of Org memberships (effective only for Platform Admins)
  , deleteOrganizationMembershipsParametersQueryForce :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON DeleteOrganizationMembershipsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathOrganization_id" Data.Aeson.Types.ToJSON..= deleteOrganizationMembershipsParametersPathOrganizationId obj] : ["pathUser_ids" Data.Aeson.Types.ToJSON..= deleteOrganizationMembershipsParametersPathUserIds obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryForce" Data.Aeson.Types.ToJSON..=)) (deleteOrganizationMembershipsParametersQueryForce obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathOrganization_id" Data.Aeson.Types.ToJSON..= deleteOrganizationMembershipsParametersPathOrganizationId obj] : ["pathUser_ids" Data.Aeson.Types.ToJSON..= deleteOrganizationMembershipsParametersPathUserIds obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryForce" Data.Aeson.Types.ToJSON..=)) (deleteOrganizationMembershipsParametersQueryForce obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON DeleteOrganizationMembershipsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteOrganizationMembershipsParameters" (\obj -> ((GHC.Base.pure DeleteOrganizationMembershipsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathOrganization_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathUser_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryForce"))
-- | Create a new 'DeleteOrganizationMembershipsParameters' with all required fields.
mkDeleteOrganizationMembershipsParameters :: Data.Text.Internal.Text -- ^ 'deleteOrganizationMembershipsParametersPathOrganizationId'
  -> Data.Text.Internal.Text -- ^ 'deleteOrganizationMembershipsParametersPathUserIds'
  -> DeleteOrganizationMembershipsParameters
mkDeleteOrganizationMembershipsParameters deleteOrganizationMembershipsParametersPathOrganizationId deleteOrganizationMembershipsParametersPathUserIds = DeleteOrganizationMembershipsParameters{deleteOrganizationMembershipsParametersPathOrganizationId = deleteOrganizationMembershipsParametersPathOrganizationId,
                                                                                                                                                                                                 deleteOrganizationMembershipsParametersPathUserIds = deleteOrganizationMembershipsParametersPathUserIds,
                                                                                                                                                                                                 deleteOrganizationMembershipsParametersQueryForce = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'deleteOrganizationMemberships'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteOrganizationMembershipsResponseError' is used.
data DeleteOrganizationMembershipsResponse =
   DeleteOrganizationMembershipsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | DeleteOrganizationMembershipsResponse200 -- ^ Organization membership deleted successfully
  | DeleteOrganizationMembershipsResponse404 -- ^ * User not found. (code: \`user.not_found\`) * Organization not found. (code: \`organization.not_found\`) * Organization membership not found. (code: \`organization.membership_not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- The same as 'deleteOrganizationMemberships' but accepts an explicit configuration.
deleteOrganizationMembershipsWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> DeleteOrganizationMembershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response DeleteOrganizationMembershipsResponse) -- ^ Monadic computation which returns the result of the operation
deleteOrganizationMembershipsWithConfiguration config
                                               parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either DeleteOrganizationMembershipsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right DeleteOrganizationMembershipsResponse200
                                                                                                                                                                                                                    | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right DeleteOrganizationMembershipsResponse404
                                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathOrganizationId parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathUserIds parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteOrganizationMembershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- The same as 'deleteOrganizationMemberships' but returns the raw 'Data.ByteString.Char8.ByteString'.
deleteOrganizationMembershipsRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => DeleteOrganizationMembershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
deleteOrganizationMembershipsRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathOrganizationId parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathUserIds parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteOrganizationMembershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- The same as 'deleteOrganizationMemberships' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
deleteOrganizationMembershipsWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> DeleteOrganizationMembershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
deleteOrganizationMembershipsWithConfigurationRaw config
                                                  parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathOrganizationId parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (deleteOrganizationMembershipsParametersPathUserIds parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteOrganizationMembershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])

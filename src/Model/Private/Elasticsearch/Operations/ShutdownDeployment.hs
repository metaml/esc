-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation shutdownDeployment
module Model/Private/Elasticsearch.Operations.ShutdownDeployment where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > POST /deployments/{deployment_id}/_shutdown
-- 
-- Shuts down all resources in a Deployment.
shutdownDeployment :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => ShutdownDeploymentParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response ShutdownDeploymentResponse) -- ^ Monadic computation which returns the result of the operation
shutdownDeployment parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ShutdownDeploymentResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse200
                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse400
                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse401
                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse404
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (shutdownDeploymentParametersPathDeploymentId parameters))) GHC.Base.++ "/_shutdown"))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "hide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQueryHide parameters) (Data.Text.pack "form") GHC.Types.False,
odel/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "skip_snapshot") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQuerySkipSnapshot parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/deployments\/{deployment_id}\/_shutdown.POST.parameters@ in the specification.
-- 
-- 
data ShutdownDeploymentParameters = ShutdownDeploymentParameters {
  -- | pathDeployment_id: Represents the parameter named \'deployment_id\'
  -- 
  -- Identifier for the Deployment
  shutdownDeploymentParametersPathDeploymentId :: Data.Text.Internal.Text
  -- | queryHide: Represents the parameter named \'hide\'
  -- 
  -- Whether or not to hide the deployment and its resources.Only applicable for Platform administrators.
  , shutdownDeploymentParametersQueryHide :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | querySkip_snapshot: Represents the parameter named \'skip_snapshot\'
  -- 
  -- Whether or not to skip snapshots before shutting down the resources
  , shutdownDeploymentParametersQuerySkipSnapshot :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ShutdownDeploymentParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= shutdownDeploymentParametersPathDeploymentId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryHide" Data.Aeson.Types.ToJSON..=)) (shutdownDeploymentParametersQueryHide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySkip_snapshot" Data.Aeson.Types.ToJSON..=)) (shutdownDeploymentParametersQuerySkipSnapshot obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= shutdownDeploymentParametersPathDeploymentId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryHide" Data.Aeson.Types.ToJSON..=)) (shutdownDeploymentParametersQueryHide obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySkip_snapshot" Data.Aeson.Types.ToJSON..=)) (shutdownDeploymentParametersQuerySkipSnapshot obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON ShutdownDeploymentParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ShutdownDeploymentParameters" (\obj -> ((GHC.Base.pure ShutdownDeploymentParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDeployment_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryHide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySkip_snapshot"))
-- | Create a new 'ShutdownDeploymentParameters' with all required fields.
mkShutdownDeploymentParameters :: Data.Text.Internal.Text -- ^ 'shutdownDeploymentParametersPathDeploymentId'
  -> ShutdownDeploymentParameters
mkShutdownDeploymentParameters shutdownDeploymentParametersPathDeploymentId = ShutdownDeploymentParameters{shutdownDeploymentParametersPathDeploymentId = shutdownDeploymentParametersPathDeploymentId,
                                                                                                           shutdownDeploymentParametersQueryHide = GHC.Maybe.Nothing,
                                                                                                           shutdownDeploymentParametersQuerySkipSnapshot = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'shutdownDeployment'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ShutdownDeploymentResponseError' is used.
data ShutdownDeploymentResponse =
   ShutdownDeploymentResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ShutdownDeploymentResponse200 -- ^ The request was valid and the resources of the deployment were shutdown.
  | ShutdownDeploymentResponse400 -- ^ Parameter is restricted and can only be set by a Platform administrator. (code: \`deployments.restricted_parameter\`)
  | ShutdownDeploymentResponse401 -- ^ You are not authorized to perform this action.
  | ShutdownDeploymentResponse404 -- ^ The Deployment specified by {deployment_id} cannot be found. (code: \`deployments.deployment_not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /deployments/{deployment_id}/_shutdown
-- 
-- The same as 'shutdownDeployment' but accepts an explicit configuration.
shutdownDeploymentWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> ShutdownDeploymentParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response ShutdownDeploymentResponse) -- ^ Monadic computation which returns the result of the operation
shutdownDeploymentWithConfiguration config
                                    parameters = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either ShutdownDeploymentResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse200
                                                                                                                                                                                              | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse400
                                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse401
                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ShutdownDeploymentResponse404
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (shutdownDeploymentParametersPathDeploymentId parameters))) GHC.Base.++ "/_shutdown"))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "hide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQueryHide parameters) (Data.Text.pack "form") GHC.Types.False,
odel/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "skip_snapshot") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQuerySkipSnapshot parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /deployments/{deployment_id}/_shutdown
-- 
-- The same as 'shutdownDeployment' but returns the raw 'Data.ByteString.Char8.ByteString'.
shutdownDeploymentRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => ShutdownDeploymentParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
shutdownDeploymentRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (shutdownDeploymentParametersPathDeploymentId parameters))) GHC.Base.++ "/_shutdown"))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "hide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQueryHide parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                  Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "skip_snapshot") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQuerySkipSnapshot parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /deployments/{deployment_id}/_shutdown
-- 
-- The same as 'shutdownDeployment' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
shutdownDeploymentWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> ShutdownDeploymentParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
shutdownDeploymentWithConfigurationRaw config
                                       parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (shutdownDeploymentParametersPathDeploymentId parameters))) GHC.Base.++ "/_shutdown"))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "hide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQueryHide parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "skip_snapshot") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> shutdownDeploymentParametersQuerySkipSnapshot parameters) (Data.Text.pack "form") GHC.Types.False])

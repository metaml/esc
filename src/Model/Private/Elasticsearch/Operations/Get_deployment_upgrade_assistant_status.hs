-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation get_deployment_upgrade_assistant_status
module Model/Private/Elasticsearch.Operations.Get_deployment_upgrade_assistant_status where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > GET /deployments/{deployment_id}/upgrade_assistant/status
-- 
-- Get details about an Elasticsearch resource belonging to a given deployment.
get_deployment_upgrade_assistant_status :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ deployment_id: Identifier for the Deployment
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Get_deployment_upgrade_assistant_statusResponse) -- ^ Monadic computation which returns the result of the operation
get_deployment_upgrade_assistant_status deployment_id = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Get_deployment_upgrade_assistant_statusResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_deployment_upgrade_assistant_statusResponse200
                                                                                                                                                                                                                          | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_deployment_upgrade_assistant_statusResponse404
                                                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel deployment_id)) GHC.Base.++ "/upgrade_assistant/status"))) GHC.Base.mempty)
-- | Represents a response of the operation 'get_deployment_upgrade_assistant_status'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Get_deployment_upgrade_assistant_statusResponseError' is used.
data Get_deployment_upgrade_assistant_statusResponse =
   Get_deployment_upgrade_assistant_statusResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Get_deployment_upgrade_assistant_statusResponse200 -- ^ The Upgrade Assistant returned the status successfully
  | Get_deployment_upgrade_assistant_statusResponse404 -- ^ The Deployment specified by {deployment_id} cannot be found. (code: \`deployments.deployment_not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /deployments/{deployment_id}/upgrade_assistant/status
-- 
-- The same as 'get_deployment_upgrade_assistant_status' but accepts an explicit configuration.
get_deployment_upgrade_assistant_statusWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ deployment_id: Identifier for the Deployment
  -> m (Network.HTTP.Client.Types.Response Get_deployment_upgrade_assistant_statusResponse) -- ^ Monadic computation which returns the result of the operation
get_deployment_upgrade_assistant_statusWithConfiguration config
                                                         deployment_id = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Get_deployment_upgrade_assistant_statusResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_deployment_upgrade_assistant_statusResponse200
                                                                                                                                                                                                                                           | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Get_deployment_upgrade_assistant_statusResponse404
                                                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel deployment_id)) GHC.Base.++ "/upgrade_assistant/status"))) GHC.Base.mempty)
-- | > GET /deployments/{deployment_id}/upgrade_assistant/status
-- 
-- The same as 'get_deployment_upgrade_assistant_status' but returns the raw 'Data.ByteString.Char8.ByteString'.
get_deployment_upgrade_assistant_statusRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ deployment_id: Identifier for the Deployment
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_deployment_upgrade_assistant_statusRaw deployment_id = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel deployment_id)) GHC.Base.++ "/upgrade_assistant/status"))) GHC.Base.mempty)
-- | > GET /deployments/{deployment_id}/upgrade_assistant/status
-- 
-- The same as 'get_deployment_upgrade_assistant_status' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
get_deployment_upgrade_assistant_statusWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ deployment_id: Identifier for the Deployment
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
get_deployment_upgrade_assistant_statusWithConfigurationRaw config
                                                            deployment_id = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel deployment_id)) GHC.Base.++ "/upgrade_assistant/status"))) GHC.Base.mempty)

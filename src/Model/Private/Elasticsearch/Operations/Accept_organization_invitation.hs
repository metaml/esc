-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation accept_organization_invitation
module Model/Private/Elasticsearch.Operations.Accept_organization_invitation where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > POST /organizations/invitations/{invitation_token}/_accept
-- 
-- Accepts an organization invitation. Currently unavailable in self-hosted ECE.
accept_organization_invitation :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ invitation_token: Organization invitation token
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Accept_organization_invitationResponse) -- ^ Monadic computation which returns the result of the operation
accept_organization_invitation invitation_token = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Accept_organization_invitationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse200
                                                                                                                                                                                                           | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse400
                                                                                                                                                                                                           | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse403
                                                                                                                                                                                                           | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse404
                                                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/organizations/invitations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel invitation_token)) GHC.Base.++ "/_accept"))) GHC.Base.mempty)
-- | Represents a response of the operation 'accept_organization_invitation'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Accept_organization_invitationResponseError' is used.
data Accept_organization_invitationResponse =
   Accept_organization_invitationResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Accept_organization_invitationResponse200 -- ^ Organization invitation accepted successfully
  | Accept_organization_invitationResponse400 -- ^ User already belongs to organization. (code: \`organization.user_organization_already_belongs\`)
  | Accept_organization_invitationResponse403 -- ^ The current user authentication is not valid. (code: \`root.invalid_authentication\`)
  | Accept_organization_invitationResponse404 -- ^ * Organization not found. (code: \`organization.not_found\`) * User not found. (code: \`user.not_found\`) * Invitation not found. (code: \`organization.invitation_not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /organizations/invitations/{invitation_token}/_accept
-- 
-- The same as 'accept_organization_invitation' but accepts an explicit configuration.
accept_organization_invitationWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ invitation_token: Organization invitation token
  -> m (Network.HTTP.Client.Types.Response Accept_organization_invitationResponse) -- ^ Monadic computation which returns the result of the operation
accept_organization_invitationWithConfiguration config
                                                invitation_token = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either Accept_organization_invitationResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse200
                                                                                                                                                                                                                            | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse400
                                                                                                                                                                                                                            | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse403
                                                                                                                                                                                                                            | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Accept_organization_invitationResponse404
                                                                                                                                                                                                                            | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/organizations/invitations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel invitation_token)) GHC.Base.++ "/_accept"))) GHC.Base.mempty)
-- | > POST /organizations/invitations/{invitation_token}/_accept
-- 
-- The same as 'accept_organization_invitation' but returns the raw 'Data.ByteString.Char8.ByteString'.
accept_organization_invitationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ invitation_token: Organization invitation token
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
accept_organization_invitationRaw invitation_token = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/organizations/invitations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel invitation_token)) GHC.Base.++ "/_accept"))) GHC.Base.mempty)
-- | > POST /organizations/invitations/{invitation_token}/_accept
-- 
-- The same as 'accept_organization_invitation' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
accept_organization_invitationWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Data.Text.Internal.Text -- ^ invitation_token: Organization invitation token
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
accept_organization_invitationWithConfigurationRaw config
                                                   invitation_token = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/organizations/invitations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel invitation_token)) GHC.Base.++ "/_accept"))) GHC.Base.mempty)

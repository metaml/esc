-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation delete_organization_memberships
module Model/Private/Elasticsearch.Operations.Delete_organization_memberships where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- Deletes one or more organization memberships. Currently unavailable in self-hosted ECE.
delete_organization_memberships :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Delete_organization_membershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Delete_organization_membershipsResponse) -- ^ Monadic computation which returns the result of the operation
delete_organization_memberships parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Delete_organization_membershipsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_organization_membershipsResponse200
                                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_organization_membershipsResponse404
                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathOrganization_id parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathUser_ids parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> delete_organization_membershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/organizations\/{organization_id}\/members\/{user_ids}.DELETE.parameters@ in the specification.
-- 
-- 
data Delete_organization_membershipsParameters = Delete_organization_membershipsParameters {
  -- | pathOrganization_id: Represents the parameter named \'organization_id\'
  -- 
  -- Identifier for the Organization
  delete_organization_membershipsParametersPathOrganization_id :: Data.Text.Internal.Text
  -- | pathUser_ids: Represents the parameter named \'user_ids\'
  -- 
  -- CSV list of User identifiers
  , delete_organization_membershipsParametersPathUser_ids :: Data.Text.Internal.Text
  -- | queryForce: Represents the parameter named \'force\'
  -- 
  -- Whether or not to force the removal of Org memberships (effective only for Platform Admins)
  , delete_organization_membershipsParametersQueryForce :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Delete_organization_membershipsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathOrganization_id" Data.Aeson.Types.ToJSON..= delete_organization_membershipsParametersPathOrganization_id obj] : ["pathUser_ids" Data.Aeson.Types.ToJSON..= delete_organization_membershipsParametersPathUser_ids obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryForce" Data.Aeson.Types.ToJSON..=)) (delete_organization_membershipsParametersQueryForce obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathOrganization_id" Data.Aeson.Types.ToJSON..= delete_organization_membershipsParametersPathOrganization_id obj] : ["pathUser_ids" Data.Aeson.Types.ToJSON..= delete_organization_membershipsParametersPathUser_ids obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryForce" Data.Aeson.Types.ToJSON..=)) (delete_organization_membershipsParametersQueryForce obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Delete_organization_membershipsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Delete_organization_membershipsParameters" (\obj -> ((GHC.Base.pure Delete_organization_membershipsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathOrganization_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathUser_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryForce"))
-- | Create a new 'Delete_organization_membershipsParameters' with all required fields.
mkDelete_organization_membershipsParameters :: Data.Text.Internal.Text -- ^ 'delete_organization_membershipsParametersPathOrganization_id'
  -> Data.Text.Internal.Text -- ^ 'delete_organization_membershipsParametersPathUser_ids'
  -> Delete_organization_membershipsParameters
mkDelete_organization_membershipsParameters delete_organization_membershipsParametersPathOrganization_id delete_organization_membershipsParametersPathUser_ids = Delete_organization_membershipsParameters{delete_organization_membershipsParametersPathOrganization_id = delete_organization_membershipsParametersPathOrganization_id,
                                                                                                                                                                                                           delete_organization_membershipsParametersPathUser_ids = delete_organization_membershipsParametersPathUser_ids,
                                                                                                                                                                                                           delete_organization_membershipsParametersQueryForce = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'delete_organization_memberships'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Delete_organization_membershipsResponseError' is used.
data Delete_organization_membershipsResponse =
   Delete_organization_membershipsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Delete_organization_membershipsResponse200 -- ^ Organization membership deleted successfully
  | Delete_organization_membershipsResponse404 -- ^ * User not found. (code: \`user.not_found\`) * Organization not found. (code: \`organization.not_found\`) * Organization membership not found. (code: \`organization.membership_not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- The same as 'delete_organization_memberships' but accepts an explicit configuration.
delete_organization_membershipsWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Delete_organization_membershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Delete_organization_membershipsResponse) -- ^ Monadic computation which returns the result of the operation
delete_organization_membershipsWithConfiguration config
                                                 parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either Delete_organization_membershipsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_organization_membershipsResponse200
                                                                                                                                                                                                                        | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Delete_organization_membershipsResponse404
                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathOrganization_id parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathUser_ids parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> delete_organization_membershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- The same as 'delete_organization_memberships' but returns the raw 'Data.ByteString.Char8.ByteString'.
delete_organization_membershipsRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Delete_organization_membershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
delete_organization_membershipsRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathOrganization_id parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathUser_ids parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> delete_organization_membershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /organizations/{organization_id}/members/{user_ids}
-- 
-- The same as 'delete_organization_memberships' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
delete_organization_membershipsWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Delete_organization_membershipsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
delete_organization_membershipsWithConfigurationRaw config
                                                    parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/organizations/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathOrganization_id parameters))) GHC.Base.++ ("/members/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (delete_organization_membershipsParametersPathUser_ids parameters))) GHC.Base.++ ""))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> delete_organization_membershipsParametersQueryForce parameters) (Data.Text.pack "form") GHC.Types.False])

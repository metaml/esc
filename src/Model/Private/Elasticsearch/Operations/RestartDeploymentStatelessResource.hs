-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation restartDeploymentStatelessResource
module Model/Private/Elasticsearch.Operations.RestartDeploymentStatelessResource where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > POST /deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart
-- 
-- Restarts a Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a \"cluster_reboot\", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
restartDeploymentStatelessResource :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => RestartDeploymentStatelessResourceParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response RestartDeploymentStatelessResourceResponse) -- ^ Monadic computation which returns the result of the operation
restartDeploymentStatelessResource parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either RestartDeploymentStatelessResourceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse202
                                                                                                                                                                                                             | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse404
                                                                                                                                                                                                             | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse422
                                                                                                                                                                                                             | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 449) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse449
                                                                                                                                                                                                             | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse500
                                                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathDeploymentId parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathStatelessResourceKind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathRefId parameters))) GHC.Base.++ "/_restart"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "cancel_pending") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> restartDeploymentStatelessResourceParametersQueryCancelPending parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/deployments\/{deployment_id}\/{stateless_resource_kind}\/{ref_id}\/_restart.POST.parameters@ in the specification.
-- 
-- 
data RestartDeploymentStatelessResourceParameters = RestartDeploymentStatelessResourceParameters {
  -- | pathDeployment_id: Represents the parameter named \'deployment_id\'
  -- 
  -- Identifier for the Deployment.
  restartDeploymentStatelessResourceParametersPathDeploymentId :: Data.Text.Internal.Text
  -- | pathRef_id: Represents the parameter named \'ref_id\'
  -- 
  -- User-specified RefId for the Resource.
  , restartDeploymentStatelessResourceParametersPathRefId :: Data.Text.Internal.Text
  -- | pathStateless_resource_kind: Represents the parameter named \'stateless_resource_kind\'
  -- 
  -- The kind of stateless resource
  , restartDeploymentStatelessResourceParametersPathStatelessResourceKind :: RestartDeploymentStatelessResourceParametersPathStatelessResourceKind
  -- | queryCancel_pending: Represents the parameter named \'cancel_pending\'
  -- 
  -- If true, cancels any pending plans before restarting. If false and there are pending plans, returns an error.
  , restartDeploymentStatelessResourceParametersQueryCancelPending :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RestartDeploymentStatelessResourceParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= restartDeploymentStatelessResourceParametersPathDeploymentId obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= restartDeploymentStatelessResourceParametersPathRefId obj] : ["pathStateless_resource_kind" Data.Aeson.Types.ToJSON..= restartDeploymentStatelessResourceParametersPathStatelessResourceKind obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCancel_pending" Data.Aeson.Types.ToJSON..=)) (restartDeploymentStatelessResourceParametersQueryCancelPending obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= restartDeploymentStatelessResourceParametersPathDeploymentId obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= restartDeploymentStatelessResourceParametersPathRefId obj] : ["pathStateless_resource_kind" Data.Aeson.Types.ToJSON..= restartDeploymentStatelessResourceParametersPathStatelessResourceKind obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCancel_pending" Data.Aeson.Types.ToJSON..=)) (restartDeploymentStatelessResourceParametersQueryCancelPending obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON RestartDeploymentStatelessResourceParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RestartDeploymentStatelessResourceParameters" (\obj -> (((GHC.Base.pure RestartDeploymentStatelessResourceParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDeployment_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRef_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathStateless_resource_kind")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCancel_pending"))
-- | Create a new 'RestartDeploymentStatelessResourceParameters' with all required fields.
mkRestartDeploymentStatelessResourceParameters :: Data.Text.Internal.Text -- ^ 'restartDeploymentStatelessResourceParametersPathDeploymentId'
  -> Data.Text.Internal.Text -- ^ 'restartDeploymentStatelessResourceParametersPathRefId'
  -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKind -- ^ 'restartDeploymentStatelessResourceParametersPathStatelessResourceKind'
  -> RestartDeploymentStatelessResourceParameters
mkRestartDeploymentStatelessResourceParameters restartDeploymentStatelessResourceParametersPathDeploymentId restartDeploymentStatelessResourceParametersPathRefId restartDeploymentStatelessResourceParametersPathStatelessResourceKind = RestartDeploymentStatelessResourceParameters{restartDeploymentStatelessResourceParametersPathDeploymentId = restartDeploymentStatelessResourceParametersPathDeploymentId,
                                                                                                                                                                                                                                                                                       restartDeploymentStatelessResourceParametersPathRefId = restartDeploymentStatelessResourceParametersPathRefId,
                                                                                                                                                                                                                                                                                       restartDeploymentStatelessResourceParametersPathStatelessResourceKind = restartDeploymentStatelessResourceParametersPathStatelessResourceKind,
                                                                                                                                                                                                                                                                                       restartDeploymentStatelessResourceParametersQueryCancelPending = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/deployments\/{deployment_id}\/{stateless_resource_kind}\/{ref_id}\/_restart.POST.parameters.properties.pathStateless_resource_kind@ in the specification.
-- 
-- Represents the parameter named \'stateless_resource_kind\'
-- 
-- The kind of stateless resource
data RestartDeploymentStatelessResourceParametersPathStatelessResourceKind =
   RestartDeploymentStatelessResourceParametersPathStatelessResourceKindOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | RestartDeploymentStatelessResourceParametersPathStatelessResourceKindTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumKibana -- ^ Represents the JSON value @"kibana"@
  | RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumApm -- ^ Represents the JSON value @"apm"@
  | RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumAppsearch -- ^ Represents the JSON value @"appsearch"@
  | RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumEnterpriseSearch -- ^ Represents the JSON value @"enterprise_search"@
  | RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumIntegrationsServer -- ^ Represents the JSON value @"integrations_server"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RestartDeploymentStatelessResourceParametersPathStatelessResourceKind
    where toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindOther val) = val
          toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumKibana) = "kibana"
          toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumApm) = "apm"
          toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumAppsearch) = "appsearch"
          toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumEnterpriseSearch) = "enterprise_search"
          toJSON (RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumIntegrationsServer) = "integrations_server"
instance Data.Aeson.Types.FromJSON.FromJSON RestartDeploymentStatelessResourceParametersPathStatelessResourceKind
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "kibana" -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumKibana
                                            | val GHC.Classes.== "apm" -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumApm
                                            | val GHC.Classes.== "appsearch" -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumAppsearch
                                            | val GHC.Classes.== "enterprise_search" -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumEnterpriseSearch
                                            | val GHC.Classes.== "integrations_server" -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKindEnumIntegrationsServer
                                            | GHC.Base.otherwise -> RestartDeploymentStatelessResourceParametersPathStatelessResourceKindOther val)
-- | Represents a response of the operation 'restartDeploymentStatelessResource'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'RestartDeploymentStatelessResourceResponseError' is used.
data RestartDeploymentStatelessResourceResponse =
   RestartDeploymentStatelessResourceResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | RestartDeploymentStatelessResourceResponse202 -- ^ The restart command was issued successfully
  | RestartDeploymentStatelessResourceResponse404 -- ^ * The Deployment specified by {deployment_id} cannot be found. (code: \`deployments.deployment_not_found\`) * The Resource specified by {ref_id} cannot be found. (code: \`deployments.deployment_resource_not_found\`)
  | RestartDeploymentStatelessResourceResponse422 -- ^ The command sent to a Resource found the Resource in an illegal state, the error message gives more details. (code: \`deployments.deployment_resource_plan_change_error\`)
  | RestartDeploymentStatelessResourceResponse449 -- ^ Elevated permissions are required. (code: \`root.unauthorized.rbac.elevated_permissions_required\`)
  | RestartDeploymentStatelessResourceResponse500 -- ^ We have failed you. (code: \`deployments.deployment_resource_no_longer_exists\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > POST /deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart
-- 
-- The same as 'restartDeploymentStatelessResource' but accepts an explicit configuration.
restartDeploymentStatelessResourceWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> RestartDeploymentStatelessResourceParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response RestartDeploymentStatelessResourceResponse) -- ^ Monadic computation which returns the result of the operation
restartDeploymentStatelessResourceWithConfiguration config
                                                    parameters = GHC.Base.fmap (\response_6 -> GHC.Base.fmap (Data.Either.either RestartDeploymentStatelessResourceResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 202) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse202
                                                                                                                                                                                                                              | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse404
                                                                                                                                                                                                                              | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse422
                                                                                                                                                                                                                              | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 449) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse449
                                                                                                                                                                                                                              | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right RestartDeploymentStatelessResourceResponse500
                                                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_6) response_6) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathDeploymentId parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathStatelessResourceKind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathRefId parameters))) GHC.Base.++ "/_restart"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "cancel_pending") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> restartDeploymentStatelessResourceParametersQueryCancelPending parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart
-- 
-- The same as 'restartDeploymentStatelessResource' but returns the raw 'Data.ByteString.Char8.ByteString'.
restartDeploymentStatelessResourceRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => RestartDeploymentStatelessResourceParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
restartDeploymentStatelessResourceRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathDeploymentId parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathStatelessResourceKind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathRefId parameters))) GHC.Base.++ "/_restart"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "cancel_pending") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> restartDeploymentStatelessResourceParametersQueryCancelPending parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > POST /deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart
-- 
-- The same as 'restartDeploymentStatelessResource' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
restartDeploymentStatelessResourceWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> RestartDeploymentStatelessResourceParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
restartDeploymentStatelessResourceWithConfigurationRaw config
                                                       parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathDeploymentId parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathStatelessResourceKind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (restartDeploymentStatelessResourceParametersPathRefId parameters))) GHC.Base.++ "/_restart"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "cancel_pending") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> restartDeploymentStatelessResourceParametersQueryCancelPending parameters) (Data.Text.pack "form") GHC.Types.False])

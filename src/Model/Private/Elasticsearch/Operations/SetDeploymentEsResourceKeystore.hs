-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation setDeploymentEsResourceKeystore
module Model/Private/Elasticsearch.Operations.SetDeploymentEsResourceKeystore where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > PATCH /deployments/{deployment_id}/elasticsearch/{ref_id}/keystore
-- 
-- Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
setDeploymentEsResourceKeystore :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => SetDeploymentEsResourceKeystoreParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> KeystoreContents -- ^ The request body to send
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response SetDeploymentEsResourceKeystoreResponse) -- ^ Monadic computation which returns the result of the operation
setDeploymentEsResourceKeystore parameters
                                body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either SetDeploymentEsResourceKeystoreResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse200
                                                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse404
                                                                                                                                                                                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 449) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse449
                                                                                                                                                                                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse500
                                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathRefId parameters))) GHC.Base.++ "/keystore"))))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/deployments\/{deployment_id}\/elasticsearch\/{ref_id}\/keystore.PATCH.parameters@ in the specification.
-- 
-- 
data SetDeploymentEsResourceKeystoreParameters = SetDeploymentEsResourceKeystoreParameters {
  -- | pathDeployment_id: Represents the parameter named \'deployment_id\'
  -- 
  -- Identifier for the Deployment
  setDeploymentEsResourceKeystoreParametersPathDeploymentId :: Data.Text.Internal.Text
  -- | pathRef_id: Represents the parameter named \'ref_id\'
  -- 
  -- User-specified RefId for the Resource
  , setDeploymentEsResourceKeystoreParametersPathRefId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON SetDeploymentEsResourceKeystoreParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= setDeploymentEsResourceKeystoreParametersPathDeploymentId obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= setDeploymentEsResourceKeystoreParametersPathRefId obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= setDeploymentEsResourceKeystoreParametersPathDeploymentId obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= setDeploymentEsResourceKeystoreParametersPathRefId obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON SetDeploymentEsResourceKeystoreParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetDeploymentEsResourceKeystoreParameters" (\obj -> (GHC.Base.pure SetDeploymentEsResourceKeystoreParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDeployment_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRef_id"))
-- | Create a new 'SetDeploymentEsResourceKeystoreParameters' with all required fields.
mkSetDeploymentEsResourceKeystoreParameters :: Data.Text.Internal.Text -- ^ 'setDeploymentEsResourceKeystoreParametersPathDeploymentId'
  -> Data.Text.Internal.Text -- ^ 'setDeploymentEsResourceKeystoreParametersPathRefId'
  -> SetDeploymentEsResourceKeystoreParameters
mkSetDeploymentEsResourceKeystoreParameters setDeploymentEsResourceKeystoreParametersPathDeploymentId setDeploymentEsResourceKeystoreParametersPathRefId = SetDeploymentEsResourceKeystoreParameters{setDeploymentEsResourceKeystoreParametersPathDeploymentId = setDeploymentEsResourceKeystoreParametersPathDeploymentId,
                                                                                                                                                                                                     setDeploymentEsResourceKeystoreParametersPathRefId = setDeploymentEsResourceKeystoreParametersPathRefId}
-- | Represents a response of the operation 'setDeploymentEsResourceKeystore'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SetDeploymentEsResourceKeystoreResponseError' is used.
data SetDeploymentEsResourceKeystoreResponse =
   SetDeploymentEsResourceKeystoreResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | SetDeploymentEsResourceKeystoreResponse200 -- ^ The new contents of the Elasticsearch keystore
  | SetDeploymentEsResourceKeystoreResponse404 -- ^ * The Deployment specified by {deployment_id} cannot be found. (code: \`deployments.deployment_not_found\`) * The Resource specified by {ref_id} cannot be found. (code: \`deployments.deployment_resource_not_found\`)
  | SetDeploymentEsResourceKeystoreResponse449 -- ^ Elevated permissions are required. (code: \`root.unauthorized.rbac.elevated_permissions_required\`)
  | SetDeploymentEsResourceKeystoreResponse500 -- ^ We have failed you. (code: \`deployments.metadata_internal_error\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > PATCH /deployments/{deployment_id}/elasticsearch/{ref_id}/keystore
-- 
-- The same as 'setDeploymentEsResourceKeystore' but accepts an explicit configuration.
setDeploymentEsResourceKeystoreWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> SetDeploymentEsResourceKeystoreParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> KeystoreContents -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response SetDeploymentEsResourceKeystoreResponse) -- ^ Monadic computation which returns the result of the operation
setDeploymentEsResourceKeystoreWithConfiguration config
                                                 parameters
                                                 body = GHC.Base.fmap (\response_5 -> GHC.Base.fmap (Data.Either.either SetDeploymentEsResourceKeystoreResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse200
                                                                                                                                                                                                                  | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse404
                                                                                                                                                                                                                  | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 449) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse449
                                                                                                                                                                                                                  | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right SetDeploymentEsResourceKeystoreResponse500
                                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_5) response_5) (Model/Private/Elasticsearch.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathRefId parameters))) GHC.Base.++ "/keystore"))))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | > PATCH /deployments/{deployment_id}/elasticsearch/{ref_id}/keystore
-- 
-- The same as 'setDeploymentEsResourceKeystore' but returns the raw 'Data.ByteString.Char8.ByteString'.
setDeploymentEsResourceKeystoreRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => SetDeploymentEsResourceKeystoreParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> KeystoreContents -- ^ The request body to send
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
setDeploymentEsResourceKeystoreRaw parameters
                                   body = GHC.Base.id (Model/Private/Elasticsearch.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathRefId parameters))) GHC.Base.++ "/keystore"))))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)
-- | > PATCH /deployments/{deployment_id}/elasticsearch/{ref_id}/keystore
-- 
-- The same as 'setDeploymentEsResourceKeystore' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
setDeploymentEsResourceKeystoreWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> SetDeploymentEsResourceKeystoreParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> KeystoreContents -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
setDeploymentEsResourceKeystoreWithConfigurationRaw config
                                                    parameters
                                                    body = GHC.Base.id (Model/Private/Elasticsearch.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PATCH") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathDeploymentId parameters))) GHC.Base.++ ("/elasticsearch/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (setDeploymentEsResourceKeystoreParametersPathRefId parameters))) GHC.Base.++ "/keystore"))))) GHC.Base.mempty (GHC.Maybe.Just body) Model/Private/Elasticsearch.Common.RequestBodyEncodingJSON)

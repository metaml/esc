-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getExtension
module Model/Private/Elasticsearch.Operations.GetExtension where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > GET /deployments/extensions/{extension_id}
-- 
-- Retrieves an extension.
getExtension :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetExtensionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response GetExtensionResponse) -- ^ Monadic computation which returns the result of the operation
getExtension parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetExtensionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetExtensionResponse200
                                                                                                                                                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetExtensionResponse404
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/extensions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getExtensionParametersPathExtensionId parameters))) GHC.Base.++ ""))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_deployments") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getExtensionParametersQueryIncludeDeployments parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/deployments\/extensions\/{extension_id}.GET.parameters@ in the specification.
-- 
-- 
data GetExtensionParameters = GetExtensionParameters {
  -- | pathExtension_id: Represents the parameter named \'extension_id\'
  -- 
  -- Id of an extension
  getExtensionParametersPathExtensionId :: Data.Text.Internal.Text
  -- | queryInclude_deployments: Represents the parameter named \'include_deployments\'
  -- 
  -- Include deployments referencing this extension. Up to only 10000 deployments will be included.
  , getExtensionParametersQueryIncludeDeployments :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetExtensionParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathExtension_id" Data.Aeson.Types.ToJSON..= getExtensionParametersPathExtensionId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInclude_deployments" Data.Aeson.Types.ToJSON..=)) (getExtensionParametersQueryIncludeDeployments obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathExtension_id" Data.Aeson.Types.ToJSON..= getExtensionParametersPathExtensionId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInclude_deployments" Data.Aeson.Types.ToJSON..=)) (getExtensionParametersQueryIncludeDeployments obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetExtensionParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetExtensionParameters" (\obj -> (GHC.Base.pure GetExtensionParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathExtension_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryInclude_deployments"))
-- | Create a new 'GetExtensionParameters' with all required fields.
mkGetExtensionParameters :: Data.Text.Internal.Text -- ^ 'getExtensionParametersPathExtensionId'
  -> GetExtensionParameters
mkGetExtensionParameters getExtensionParametersPathExtensionId = GetExtensionParameters{getExtensionParametersPathExtensionId = getExtensionParametersPathExtensionId,
                                                                                        getExtensionParametersQueryIncludeDeployments = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getExtension'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetExtensionResponseError' is used.
data GetExtensionResponse =
   GetExtensionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetExtensionResponse200 -- ^ The Extension
  | GetExtensionResponse404 -- ^ The extension requested does not exist. (code: \`extensions.not_found\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /deployments/extensions/{extension_id}
-- 
-- The same as 'getExtension' but accepts an explicit configuration.
getExtensionWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetExtensionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetExtensionResponse) -- ^ Monadic computation which returns the result of the operation
getExtensionWithConfiguration config
                              parameters = GHC.Base.fmap (\response_3 -> GHC.Base.fmap (Data.Either.either GetExtensionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetExtensionResponse200
                                                                                                                                                                                  | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetExtensionResponse404
                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_3) response_3) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/extensions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getExtensionParametersPathExtensionId parameters))) GHC.Base.++ ""))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_deployments") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getExtensionParametersQueryIncludeDeployments parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /deployments/extensions/{extension_id}
-- 
-- The same as 'getExtension' but returns the raw 'Data.ByteString.Char8.ByteString'.
getExtensionRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetExtensionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getExtensionRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/extensions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getExtensionParametersPathExtensionId parameters))) GHC.Base.++ ""))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_deployments") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getExtensionParametersQueryIncludeDeployments parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /deployments/extensions/{extension_id}
-- 
-- The same as 'getExtension' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getExtensionWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetExtensionParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getExtensionWithConfigurationRaw config
                                 parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/deployments/extensions/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (getExtensionParametersPathExtensionId parameters))) GHC.Base.++ ""))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "include_deployments") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getExtensionParametersQueryIncludeDeployments parameters) (Data.Text.pack "form") GHC.Types.False])

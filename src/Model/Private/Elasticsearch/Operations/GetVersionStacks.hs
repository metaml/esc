-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getVersionStacks
module Model/Private/Elasticsearch.Operations.GetVersionStacks where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > GET /stack/versions
-- 
-- By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the \`show_deleted parameter\`.
getVersionStacks :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetVersionStacksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response GetVersionStacksResponse) -- ^ Monadic computation which returns the result of the operation
getVersionStacks parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetVersionStacksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetVersionStacksResponse200
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/stack/versions") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_deleted") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowDeleted parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                            Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_unusable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowUnusable parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/stack\/versions.GET.parameters@ in the specification.
-- 
-- 
data GetVersionStacksParameters = GetVersionStacksParameters {
  -- | queryShow_deleted: Represents the parameter named \'show_deleted\'
  -- 
  -- Whether to show deleted stack versions or not
  getVersionStacksParametersQueryShowDeleted :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | queryShow_unusable: Represents the parameter named \'show_unusable\'
  -- 
  -- Whether to show versions that are unusable by the authenticated user
  , getVersionStacksParametersQueryShowUnusable :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetVersionStacksParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryShow_deleted" Data.Aeson.Types.ToJSON..=)) (getVersionStacksParametersQueryShowDeleted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryShow_unusable" Data.Aeson.Types.ToJSON..=)) (getVersionStacksParametersQueryShowUnusable obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryShow_deleted" Data.Aeson.Types.ToJSON..=)) (getVersionStacksParametersQueryShowDeleted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryShow_unusable" Data.Aeson.Types.ToJSON..=)) (getVersionStacksParametersQueryShowUnusable obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetVersionStacksParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetVersionStacksParameters" (\obj -> (GHC.Base.pure GetVersionStacksParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryShow_deleted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryShow_unusable"))
-- | Create a new 'GetVersionStacksParameters' with all required fields.
mkGetVersionStacksParameters :: GetVersionStacksParameters
mkGetVersionStacksParameters = GetVersionStacksParameters{getVersionStacksParametersQueryShowDeleted = GHC.Maybe.Nothing,
                                                          getVersionStacksParametersQueryShowUnusable = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getVersionStacks'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetVersionStacksResponseError' is used.
data GetVersionStacksResponse =
   GetVersionStacksResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetVersionStacksResponse200 -- ^ The list of all available Elastic Stack versions are retrieved, including the template version and structure.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > GET /stack/versions
-- 
-- The same as 'getVersionStacks' but accepts an explicit configuration.
getVersionStacksWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetVersionStacksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response GetVersionStacksResponse) -- ^ Monadic computation which returns the result of the operation
getVersionStacksWithConfiguration config
                                  parameters = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either GetVersionStacksResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right GetVersionStacksResponse200
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/stack/versions") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_deleted") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowDeleted parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                   Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_unusable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowUnusable parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /stack/versions
-- 
-- The same as 'getVersionStacks' but returns the raw 'Data.ByteString.Char8.ByteString'.
getVersionStacksRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => GetVersionStacksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getVersionStacksRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/stack/versions") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_deleted") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowDeleted parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                              Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_unusable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowUnusable parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > GET /stack/versions
-- 
-- The same as 'getVersionStacks' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getVersionStacksWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> GetVersionStacksParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
getVersionStacksWithConfigurationRaw config
                                     parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/stack/versions") [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_deleted") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowDeleted parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                     Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "show_unusable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getVersionStacksParametersQueryShowUnusable parameters) (Data.Text.pack "form") GHC.Types.False])

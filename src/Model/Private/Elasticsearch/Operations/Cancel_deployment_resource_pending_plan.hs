-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation cancel_deployment_resource_pending_plan
module Model/Private/Elasticsearch.Operations.Cancel_deployment_resource_pending_plan where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Model/Private/Elasticsearch.Common
import Model/Private/Elasticsearch.Types

-- | > DELETE /deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending
-- 
-- Cancels the pending plan of a Resource belonging to a given Deployment.
cancel_deployment_resource_pending_plan :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Cancel_deployment_resource_pending_planParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Cancel_deployment_resource_pending_planResponse) -- ^ Monadic computation which returns the result of the operation
cancel_deployment_resource_pending_plan parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either Cancel_deployment_resource_pending_planResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse200
                                                                                                                                                                                                                       | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse400
                                                                                                                                                                                                                       | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse404
                                                                                                                                                                                                                       | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 449) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse449
                                                                                                                                                                                                                       | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse500
                                                                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathDeployment_id parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathResource_kind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathRef_id parameters))) GHC.Base.++ "/plan/pending"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force_delete") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryForce_delete parameters) (Data.Text.pack "form") GHC.Types.False,
odel/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "ignore_missing") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryIgnore_missing parameters) (Data.Text.pack "form") GHC.Types.False])
-- | Defines the object schema located at @paths.\/deployments\/{deployment_id}\/{resource_kind}\/{ref_id}\/plan\/pending.DELETE.parameters@ in the specification.
-- 
-- 
data Cancel_deployment_resource_pending_planParameters = Cancel_deployment_resource_pending_planParameters {
  -- | pathDeployment_id: Represents the parameter named \'deployment_id\'
  -- 
  -- Identifier for the Deployment
  cancel_deployment_resource_pending_planParametersPathDeployment_id :: Data.Text.Internal.Text
  -- | pathRef_id: Represents the parameter named \'ref_id\'
  -- 
  -- User-specified RefId for the Resource
  , cancel_deployment_resource_pending_planParametersPathRef_id :: Data.Text.Internal.Text
  -- | pathResource_kind: Represents the parameter named \'resource_kind\'
  -- 
  -- The kind of resource
  , cancel_deployment_resource_pending_planParametersPathResource_kind :: Cancel_deployment_resource_pending_planParametersPathResource_kind
  -- | queryForce_delete: Represents the parameter named \'force_delete\'
  -- 
  -- When \`true\`, deletes the pending plan instead of attempting a graceful cancellation. The default is \`false\`.
  , cancel_deployment_resource_pending_planParametersQueryForce_delete :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | queryIgnore_missing: Represents the parameter named \'ignore_missing\'
  -- 
  -- When \`true\`, returns successfully, even when plans are missing. The default is \`false\`.
  , cancel_deployment_resource_pending_planParametersQueryIgnore_missing :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Cancel_deployment_resource_pending_planParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= cancel_deployment_resource_pending_planParametersPathDeployment_id obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= cancel_deployment_resource_pending_planParametersPathRef_id obj] : ["pathResource_kind" Data.Aeson.Types.ToJSON..= cancel_deployment_resource_pending_planParametersPathResource_kind obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryForce_delete" Data.Aeson.Types.ToJSON..=)) (cancel_deployment_resource_pending_planParametersQueryForce_delete obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIgnore_missing" Data.Aeson.Types.ToJSON..=)) (cancel_deployment_resource_pending_planParametersQueryIgnore_missing obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathDeployment_id" Data.Aeson.Types.ToJSON..= cancel_deployment_resource_pending_planParametersPathDeployment_id obj] : ["pathRef_id" Data.Aeson.Types.ToJSON..= cancel_deployment_resource_pending_planParametersPathRef_id obj] : ["pathResource_kind" Data.Aeson.Types.ToJSON..= cancel_deployment_resource_pending_planParametersPathResource_kind obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryForce_delete" Data.Aeson.Types.ToJSON..=)) (cancel_deployment_resource_pending_planParametersQueryForce_delete obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIgnore_missing" Data.Aeson.Types.ToJSON..=)) (cancel_deployment_resource_pending_planParametersQueryIgnore_missing obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Cancel_deployment_resource_pending_planParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Cancel_deployment_resource_pending_planParameters" (\obj -> ((((GHC.Base.pure Cancel_deployment_resource_pending_planParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathDeployment_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRef_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathResource_kind")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryForce_delete")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryIgnore_missing"))
-- | Create a new 'Cancel_deployment_resource_pending_planParameters' with all required fields.
mkCancel_deployment_resource_pending_planParameters :: Data.Text.Internal.Text -- ^ 'cancel_deployment_resource_pending_planParametersPathDeployment_id'
  -> Data.Text.Internal.Text -- ^ 'cancel_deployment_resource_pending_planParametersPathRef_id'
  -> Cancel_deployment_resource_pending_planParametersPathResource_kind -- ^ 'cancel_deployment_resource_pending_planParametersPathResource_kind'
  -> Cancel_deployment_resource_pending_planParameters
mkCancel_deployment_resource_pending_planParameters cancel_deployment_resource_pending_planParametersPathDeployment_id cancel_deployment_resource_pending_planParametersPathRef_id cancel_deployment_resource_pending_planParametersPathResource_kind = Cancel_deployment_resource_pending_planParameters{cancel_deployment_resource_pending_planParametersPathDeployment_id = cancel_deployment_resource_pending_planParametersPathDeployment_id,
                                                                                                                                                                                                                                                                                                          cancel_deployment_resource_pending_planParametersPathRef_id = cancel_deployment_resource_pending_planParametersPathRef_id,
                                                                                                                                                                                                                                                                                                          cancel_deployment_resource_pending_planParametersPathResource_kind = cancel_deployment_resource_pending_planParametersPathResource_kind,
                                                                                                                                                                                                                                                                                                          cancel_deployment_resource_pending_planParametersQueryForce_delete = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                          cancel_deployment_resource_pending_planParametersQueryIgnore_missing = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/deployments\/{deployment_id}\/{resource_kind}\/{ref_id}\/plan\/pending.DELETE.parameters.properties.pathResource_kind@ in the specification.
-- 
-- Represents the parameter named \'resource_kind\'
-- 
-- The kind of resource
data Cancel_deployment_resource_pending_planParametersPathResource_kind =
   Cancel_deployment_resource_pending_planParametersPathResource_kindOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Cancel_deployment_resource_pending_planParametersPathResource_kindTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Cancel_deployment_resource_pending_planParametersPathResource_kindEnumElasticsearch -- ^ Represents the JSON value @"elasticsearch"@
  | Cancel_deployment_resource_pending_planParametersPathResource_kindEnumKibana -- ^ Represents the JSON value @"kibana"@
  | Cancel_deployment_resource_pending_planParametersPathResource_kindEnumApm -- ^ Represents the JSON value @"apm"@
  | Cancel_deployment_resource_pending_planParametersPathResource_kindEnumAppsearch -- ^ Represents the JSON value @"appsearch"@
  | Cancel_deployment_resource_pending_planParametersPathResource_kindEnumEnterprise_search -- ^ Represents the JSON value @"enterprise_search"@
  | Cancel_deployment_resource_pending_planParametersPathResource_kindEnumIntegrations_server -- ^ Represents the JSON value @"integrations_server"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Cancel_deployment_resource_pending_planParametersPathResource_kind
    where toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindOther val) = val
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindEnumElasticsearch) = "elasticsearch"
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindEnumKibana) = "kibana"
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindEnumApm) = "apm"
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindEnumAppsearch) = "appsearch"
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindEnumEnterprise_search) = "enterprise_search"
          toJSON (Cancel_deployment_resource_pending_planParametersPathResource_kindEnumIntegrations_server) = "integrations_server"
instance Data.Aeson.Types.FromJSON.FromJSON Cancel_deployment_resource_pending_planParametersPathResource_kind
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "elasticsearch" -> Cancel_deployment_resource_pending_planParametersPathResource_kindEnumElasticsearch
                                            | val GHC.Classes.== "kibana" -> Cancel_deployment_resource_pending_planParametersPathResource_kindEnumKibana
                                            | val GHC.Classes.== "apm" -> Cancel_deployment_resource_pending_planParametersPathResource_kindEnumApm
                                            | val GHC.Classes.== "appsearch" -> Cancel_deployment_resource_pending_planParametersPathResource_kindEnumAppsearch
                                            | val GHC.Classes.== "enterprise_search" -> Cancel_deployment_resource_pending_planParametersPathResource_kindEnumEnterprise_search
                                            | val GHC.Classes.== "integrations_server" -> Cancel_deployment_resource_pending_planParametersPathResource_kindEnumIntegrations_server
                                            | GHC.Base.otherwise -> Cancel_deployment_resource_pending_planParametersPathResource_kindOther val)
-- | Represents a response of the operation 'cancel_deployment_resource_pending_plan'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'Cancel_deployment_resource_pending_planResponseError' is used.
data Cancel_deployment_resource_pending_planResponse =
   Cancel_deployment_resource_pending_planResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | Cancel_deployment_resource_pending_planResponse200 -- ^ Standard Deployment Resource Crud Response
  | Cancel_deployment_resource_pending_planResponse400 -- ^ The Resource does not have a pending plan. (code: \`deployments.resource_does_not_have_a_pending_plan\`)
  | Cancel_deployment_resource_pending_planResponse404 -- ^ The Deployment specified by {deployment_id} cannot be found. (code: \`deployments.deployment_not_found\`)
  | Cancel_deployment_resource_pending_planResponse449 -- ^ Elevated permissions are required. (code: \`root.unauthorized.rbac.elevated_permissions_required\`)
  | Cancel_deployment_resource_pending_planResponse500 -- ^ We have failed you. (code: \`deployments.deployment_resource_no_longer_exists\`)
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | > DELETE /deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending
-- 
-- The same as 'cancel_deployment_resource_pending_plan' but accepts an explicit configuration.
cancel_deployment_resource_pending_planWithConfiguration :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Cancel_deployment_resource_pending_planParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Cancel_deployment_resource_pending_planResponse) -- ^ Monadic computation which returns the result of the operation
cancel_deployment_resource_pending_planWithConfiguration config
                                                         parameters = GHC.Base.fmap (\response_6 -> GHC.Base.fmap (Data.Either.either Cancel_deployment_resource_pending_planResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse200
                                                                                                                                                                                                                                        | (\status_8 -> Network.HTTP.Types.Status.statusCode status_8 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse400
                                                                                                                                                                                                                                        | (\status_9 -> Network.HTTP.Types.Status.statusCode status_9 GHC.Classes.== 404) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse404
                                                                                                                                                                                                                                        | (\status_10 -> Network.HTTP.Types.Status.statusCode status_10 GHC.Classes.== 449) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse449
                                                                                                                                                                                                                                        | (\status_11 -> Network.HTTP.Types.Status.statusCode status_11 GHC.Classes.== 500) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right Cancel_deployment_resource_pending_planResponse500
                                                                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_6) response_6) (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathDeployment_id parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathResource_kind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathRef_id parameters))) GHC.Base.++ "/plan/pending"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force_delete") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryForce_delete parameters) (Data.Text.pack "form") GHC.Types.False,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "ignore_missing") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryIgnore_missing parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending
-- 
-- The same as 'cancel_deployment_resource_pending_plan' but returns the raw 'Data.ByteString.Char8.ByteString'.
cancel_deployment_resource_pending_planRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Cancel_deployment_resource_pending_planParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> Model/Private/Elasticsearch.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
cancel_deployment_resource_pending_planRaw parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathDeployment_id parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathResource_kind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathRef_id parameters))) GHC.Base.++ "/plan/pending"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force_delete") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryForce_delete parameters) (Data.Text.pack "form") GHC.Types.False,
odel/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "ignore_missing") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryIgnore_missing parameters) (Data.Text.pack "form") GHC.Types.False])
-- | > DELETE /deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending
-- 
-- The same as 'cancel_deployment_resource_pending_plan' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
cancel_deployment_resource_pending_planWithConfigurationRaw :: forall m . Model/Private/Elasticsearch.Common.MonadHTTP m => Model/Private/Elasticsearch.Common.Configuration -- ^ The configuration to use in the request
  -> Cancel_deployment_resource_pending_planParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
cancel_deployment_resource_pending_planWithConfigurationRaw config
                                                            parameters = GHC.Base.id (Model/Private/Elasticsearch.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/deployments/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathDeployment_id parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathResource_kind parameters))) GHC.Base.++ ("/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ Model/Private/Elasticsearch.Common.stringifyModel (cancel_deployment_resource_pending_planParametersPathRef_id parameters))) GHC.Base.++ "/plan/pending"))))))) [Model/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "force_delete") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryForce_delete parameters) (Data.Text.pack "form") GHC.Types.False,
odel/Private/Elasticsearch.Common.QueryParameter (Data.Text.pack "ignore_missing") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cancel_deployment_resource_pending_planParametersQueryIgnore_missing parameters) (Data.Text.pack "form") GHC.Types.False])
